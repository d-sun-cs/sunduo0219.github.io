import{_ as e,W as o,X as t,a1 as r}from"./framework-b5ea9e64.js";const i={},l=r('<h1 id="xv6-lab-summary" tabindex="-1"><a class="header-anchor" href="#xv6-lab-summary" aria-hidden="true">#</a> XV6 Lab Summary</h1><h2 id="lab-4-traps" tabindex="-1"><a class="header-anchor" href="#lab-4-traps" aria-hidden="true">#</a> Lab 4: traps</h2><h3 id="basic-theory" tabindex="-1"><a class="header-anchor" href="#basic-theory" aria-hidden="true">#</a> Basic Theory</h3><ul><li><p>Why to trap: Conversion between user mode and kernel mode</p><ul><li><p>What can supervisor actually do:</p><ul><li>Read or write <strong>control registers</strong></li><li>Use PTEs with 0 in <code>PTE_U</code></li></ul><blockquote><p>Still limited in <strong>virtual address</strong> set by page table</p></blockquote></li></ul></li><li><p>When to trap or What leads to trap:</p><ul><li>Syscall</li><li>Fault or Abort</li><li>Device</li></ul><blockquote><p>We also call Syscall and Fault as <strong><em>Software Interrupt</em>, Internal Interrupt or Exception</strong></p></blockquote></li><li><p>Key point of traps: <strong>Isolation &amp; Security</strong></p></li><li><p>Some relevant hardware registers / <strong>Control registers</strong>:</p><ul><li>pc: program counter</li><li>mode: mark supervisor mode or user mode</li><li>satp: supervisor <strong>address translation</strong> and protection, points to physical memory of page table</li><li>stvec: supervisor <strong>trap vector</strong> base address, points to base memory of instructions handling traps</li><li>sepc: supervisor exception program counter, <strong>keep value of pc</strong> when handling traps</li><li>sscratch: supervisor scratch, keep virtual address of <strong>trapframe page</strong> to exchange with a0</li><li>scause: supervisor cause, keep the trap <strong>reason</strong></li></ul></li><li><p>How to trap / Procedure of trap (take syscall as an example):</p><ol><li><p>Syscall function jump to <strong>usys.S</strong> and execute two instructions:</p><ol><li>Store <strong>syscall number</strong> into a7</li><li>Call <strong><code>ecall</code> instruction</strong></li></ol></li><li><p><code>ecall</code> do three things by <strong>hardware</strong>:</p><ol start="0"><li><p>Disable interrupts</p></li><li><p>Mark the <strong>mode</strong> to supervisor mode</p></li><li><p>Keep <strong>pc</strong> in sepc</p></li><li><p>Set pc to <strong>stvec</strong> and jump to <code>uservec</code> in trampoline.S</p></li></ol><blockquote><p><code>ecall</code> do only these things for <strong>more flexibility to software</strong></p></blockquote></li><li><p>Kernel executes <code>uservec</code> in trampoline.S</p><ol><li><p>Exchange a0 and sscratch</p><blockquote><p>So now a0 keeps trapframe page, sscratch keeps a0’s old value</p></blockquote></li><li><p>Keep <strong>32 user’s register</strong> in trapframe</p></li><li><p>Set stack pointer to <strong>kernel stack</strong> (getting from trapframe)</p></li><li><p>Set t0 to <strong>pointer of <code>usertrap()</code></strong> (getting from trapframe)</p></li><li><p>Set t1 to <strong>kernel page table</strong> and exchange satp and t1 (getting from trapframe)</p><blockquote><p>Now program keeps normal for <strong>trampoline page having same map</strong> in both user page table and kernel page table</p></blockquote></li><li><p><code>uservec</code> jumps to <code>usertrap()</code> in trap.c</p></li></ol></li><li><p><code>usertrap()</code> handles this trap</p><ol><li><p>Set <strong>stvec</strong> to <code>kernelvec</code></p><blockquote><p>Traps can be triggered in kernel space, different from user space</p></blockquote></li><li><p>Keep <strong>sepc</strong> in trapframe</p><blockquote><p>May it change to another process and also trigger traps to overwrite sepc</p></blockquote></li><li><p>Check <strong>cause</strong> for this trap and handle it (If syscall, enable interrupts)</p></li><li><p>Call <code>usertrapret()</code></p></li></ol></li><li><p><code>usertrapret()</code> finish some works to return to user space</p><ol><li>Disable interrupts</li><li>Set <strong>stvec</strong> to <code>uservec </code>in trampoline.S</li><li>Store <strong>kernel page table</strong> into trapframe</li><li>Store <strong>kernel stack pointer</strong> into trapframe</li><li>Store <code>usertrap</code> into trapframe</li><li>Modify <strong>sstatus</strong> to ensure returning to user mode and interrupt on</li><li>Set <strong>sepc</strong> to previous kept pc</li><li>Jump to <code>userret</code> in trampoline.S</li></ol></li><li><p>Kernel executes <code>uservec</code> in trampoline.S</p><ol><li><p>Set satp to <strong>user page table</strong> (getting from <code>usertrapret()</code>)</p></li><li><p>Restore 32 user’s resgisters</p></li><li><p>Exchange a0 and sscratch</p><blockquote><p>So now sscratch keeps trapframe page, a0 keeps syscall return value</p></blockquote></li><li><p><code>sret</code></p></li></ol></li><li><p><code>sret</code></p><ol><li>Mark the <strong>mode</strong> to user mode</li><li>Set <strong>pc</strong> to sepc</li><li>Enable interrupts</li></ol></li><li><p>Return to user space</p></li></ol></li></ul><h3 id="task-analysis" tabindex="-1"><a class="header-anchor" href="#task-analysis" aria-hidden="true">#</a> Task Analysis</h3><h4 id="task-1-risc-v-assembly" tabindex="-1"><a class="header-anchor" href="#task-1-risc-v-assembly" aria-hidden="true">#</a> Task 1: RISC-V assembly</h4><ul><li><code>jalr</code> omit first parameter for it is the same as register in second parameter</li></ul><h4 id="task-2-backtrace" tabindex="-1"><a class="header-anchor" href="#task-2-backtrace" aria-hidden="true">#</a> Task 2: Backtrace</h4><ul><li>Comprehend function call stack’s structure, especially <code>fp</code> and <code>pre fp</code>, to correctly <strong>back track</strong> function call stack</li><li>Through <strong><code>fp</code> and PAGE-align</strong> to find the top of function call stack, for XV6 allocates <strong>one page for each stack</strong></li></ul><h4 id="task-3-alarm" tabindex="-1"><a class="header-anchor" href="#task-3-alarm" aria-hidden="true">#</a> Task 3: Alarm</h4><ul><li><p>Where to call <code>fn</code>: where it handles <strong>timer interrupt</strong></p></li><li><p>When to call <code>fn</code>:</p><ul><li><strong>n ticks</strong>, so we need a new filed in process structrue <ul><li>Prevent <strong>re-entrant</strong> calls to the handler by adding a new field in process structure to sign if a handler is running</li></ul></li></ul></li><li><p>How to call <code>fn</code>:</p><ul><li><p>A new field in process structure to store <code>fn</code> address</p><blockquote><p>But in kernel mode, we can’t directly use <strong>user space address</strong> to call <code>fn</code></p></blockquote></li><li><p>Modify user process <strong>execution stream</strong> to run <code>fn</code> by:</p><ul><li>Modifying <code>sepc</code> in <strong>trap handling</strong></li><li><strong>Store</strong> user process previous <strong>context</strong> in <code>trapframe</code></li><li><strong>Restore</strong> user process previous context in <code>sigreturn</code></li></ul></li></ul></li></ul><h2 id="lab-5-xv6-lazy-page-allocation" tabindex="-1"><a class="header-anchor" href="#lab-5-xv6-lazy-page-allocation" aria-hidden="true">#</a> Lab 5: xv6 lazy page allocation</h2><h3 id="basic-theory-1" tabindex="-1"><a class="header-anchor" href="#basic-theory-1" aria-hidden="true">#</a> Basic Theory</h3><ul><li><p><strong>Information required</strong> to properly handle <strong>page faults</strong>:</p><ul><li>The error <strong>virtual address</strong> in <strong>stval</strong></li><li>The error <strong>reason</strong> in <strong>scause</strong></li><li>The instruction address triggering page fault in <strong>sepc or <code>trapframe-&gt;eps</code></strong></li></ul></li><li><p><strong>Thoughts</strong> about <strong>lazy page allocation</strong>:</p><ul><li><p><strong>Just modify the value <code>p-&gt;sz</code></strong> but do not allocate pages in <strong><code>sbrk()</code> syscall</strong></p><blockquote><p><code>sbrk()</code> <strong>expands heap</strong> to get new memory for process</p></blockquote></li><li><p>Lazily allocate pages when <strong>page faults with virtual address between</strong> <code>p-&gt;sz</code> before and after <code>sbrk()</code> occurs, and execute page fault instructions again</p><blockquote><p>To execute page fault again, we just keep the value in <strong>sepc</strong>, because it keeps <strong>the instruction address cause page fault</strong>. (For syscall, value in sepc will be <strong>increased</strong> to execute next instruction instead of <code>ecall</code> after syscal)</p></blockquote></li></ul></li><li><p>Simple <strong>implementation</strong> of <strong>lazy page allocation</strong>:</p><ul><li><p><em><strong>Lazy</strong></em>: Modify <code>sbrk()</code> by plan</p></li><li><p><em><strong>Allocate</strong></em>: Handle a more trap case <strong>page fault</strong> in <code>usertrap()</code>, to <code>kalloc()</code> a <strong>new page</strong> and <code>mappages()</code> a <strong>new map</strong> in lazy allocation</p></li><li><p><em><strong>Release</strong></em>: Delete <code>panic()</code> in <code>uvmunmap()</code> when <strong>unmapping lazy allocation page</strong> not actually used</p><blockquote><p>XV6 <code>panic()</code> when this case happens, but actually this case <strong>never happens</strong> in unmodified XV6, and we require no <code>panic()</code> on this case in lazy allocation</p></blockquote></li></ul></li></ul><h3 id="task-analysis-1" tabindex="-1"><a class="header-anchor" href="#task-analysis-1" aria-hidden="true">#</a> Task Analysis</h3><blockquote><p>Just follow thought and implementation in basic theory</p></blockquote><h4 id="task-1-eliminate-allocation-from-sbrk" tabindex="-1"><a class="header-anchor" href="#task-1-eliminate-allocation-from-sbrk" aria-hidden="true">#</a> Task 1: Eliminate allocation from sbrk()</h4><ol><li><em><strong>Lazy</strong></em></li></ol><h4 id="task-2-lazy-allocation" tabindex="-1"><a class="header-anchor" href="#task-2-lazy-allocation" aria-hidden="true">#</a> Task 2: Lazy allocation</h4><ol start="2"><li><em><strong>Allocate</strong></em></li></ol><h4 id="task-3-lazytests-and-usertests" tabindex="-1"><a class="header-anchor" href="#task-3-lazytests-and-usertests" aria-hidden="true">#</a> Task 3: Lazytests and Usertests</h4><blockquote><p>Just follow key points listed in guide book</p></blockquote><ol start="3"><li><em><strong>Release</strong></em></li><li><em><strong>Kernel</strong></em>: When user process use lazy allocated virtual address, page fault causes trap. But when <strong>syscall use user space’s lazy allocated virtual address</strong> (already in trap but not caused by page fault) , we need to handle it in <code>argaddr()</code> or <code>walkaddr()</code></li></ol><h2 id="lab-6-copy-on-write-fork-for-xv6" tabindex="-1"><a class="header-anchor" href="#lab-6-copy-on-write-fork-for-xv6" aria-hidden="true">#</a> Lab 6: Copy-on-Write Fork for xv6</h2><h3 id="basic-theory-2" tabindex="-1"><a class="header-anchor" href="#basic-theory-2" aria-hidden="true">#</a> Basic Theory</h3><ul><li><p><strong>Thoughts</strong> about <strong>COW fork</strong>:</p><ul><li><p><em><strong>Lazy:</strong></em> <strong>Just copy page table maps</strong> of parent process but do not copy pages when creating child process, and set these maps <strong>read-only</strong></p></li><li><p><em><strong>Allocate:</strong></em> Lazily copy pages when parent or child process <strong>write these pages causing page faults</strong>, and execute page fault instructions again</p><blockquote><p>For recognizing this case, we need use <strong>a new sign bit in PTE</strong>, or we may not distinguish this case from writing <strong>an originally read-only page</strong></p></blockquote></li><li><p><em><strong>Release:</strong></em> Be careful to decide whether to <strong>release a page</strong> when parent process exits, for child process maybe using it</p><blockquote><p>We can set <strong>a reference counter</strong> for these pages</p></blockquote></li></ul></li></ul><h3 id="task-analysis-2" tabindex="-1"><a class="header-anchor" href="#task-analysis-2" aria-hidden="true">#</a> Task Analysis</h3><h4 id="task-1-implement-copy-on-write" tabindex="-1"><a class="header-anchor" href="#task-1-implement-copy-on-write" aria-hidden="true">#</a> Task 1: Implement copy-on write</h4><blockquote><p>Just follow thought in basic theory with the help of hints in guide book</p></blockquote><ol><li><em><strong>Lazy</strong></em></li><li><em><strong>Allocate</strong></em></li><li><em><strong>Release</strong></em></li><li><em><strong>Kernel</strong></em>: When user process <em>write</em> lazy allocated virtual address, page fault causes trap. But when <strong>kernel process <em><u>write</u></em> user space’s lazy allocated virtual address</strong> (already in trap but not caused by page fault) , we need to handle it in <code>copyout()</code></li></ol><h2 id="lab-7-multithreading" tabindex="-1"><a class="header-anchor" href="#lab-7-multithreading" aria-hidden="true">#</a> Lab 7: Multithreading</h2><h3 id="basic-theory-3" tabindex="-1"><a class="header-anchor" href="#basic-theory-3" aria-hidden="true">#</a> Basic Theory</h3><h4 id="interrupt" tabindex="-1"><a class="header-anchor" href="#interrupt" aria-hidden="true">#</a> Interrupt</h4><blockquote><p>Here we mainly talk about <strong>the narrow interrupt</strong>, not software interrupt</p></blockquote><ul><li><p>Differences between <strong>interrupt</strong> and other trap causes (software interrupt):</p><ul><li><em><strong>Asynchronous</strong></em>: <strong>Interrupt handler</strong> has no relationship with current CPU running process</li><li><em><strong>Concurrency</strong></em>: <strong>Devices generating interrupt</strong> <em>concurrently run</em> with CPU</li><li><em><strong>Program device</strong></em>: Devices like network card also require programming</li></ul></li><li><p><strong>Related registers</strong> about interrupt:</p><ul><li>SIE: Supervisor Interrupt Enable, has one bit for <strong>device interrupt</strong>, one bit for <strong>software interrupt</strong> and one bit for <strong>timer interrupt</strong></li><li>SSTATUS: Supervisor STATUS, has one bit to <strong>open or close interrupt</strong></li><li>SIP: Supervisor Interrupt Pending, keep <strong>the type of interrupt</strong></li></ul></li><li><p>Basic setting of interrupt (in <code>main()</code>):</p><ol><li>Program devices</li><li>Program PLIC (<code>plicinit()</code>)</li><li>Every CPU core call <code>plicinithart()</code> to show interest to device interrupts</li><li><code>scheduler()</code> to <code>intr_on()</code> opening interrupt and run process</li></ol></li><li><p>Hardware about interrupt:</p><ul><li>PLIC <strong>route interrupts</strong> from devices to <strong>CPU claiming</strong> to receive interrupt</li><li>CPU handle interrupt with trap mechanism</li><li>CPU will <strong>notice PLIC</strong> after handling interrupt</li></ul><blockquote><p>Kernel need to <strong>program PLIC</strong> to tell it how to route interrupts</p></blockquote></li><li><p>Software about interrupt / <strong>Driver</strong>:</p><ul><li>Bottom part: <strong>interrupt handler</strong></li><li>Top part: <strong>interfaces</strong> for user or kernel process</li></ul></li></ul><h4 id="multithreading-timer-interrupt" tabindex="-1"><a class="header-anchor" href="#multithreading-timer-interrupt" aria-hidden="true">#</a> Multithreading &amp; Timer Interrupt</h4><ul><li><p>Three parts of thread’s status to keep when switching</p><ul><li><strong>Program counter</strong></li><li><strong>Registers</strong> storing variables</li><li>Program <strong>stack</strong></li></ul></li><li><p>XV6’s multithread mechanism</p><ul><li><strong>One kernel thread</strong> per user process, which <strong>handling traps</strong> for user process</li><li><strong>Only one user thread</strong> per user process, which <strong>controlling instructions</strong> of user process</li></ul><blockquote><p>So we may conclude that in XV6, one user process has two threads, but they never run together</p></blockquote></li><li><p>Implementation of multithread switch / Timer interrupt:</p><ol><li><p><strong>Hardware</strong> produce interrupt periodically, convert user space into <em><strong><u>kernel</u>’s</strong></em> timer interrupt handler</p><blockquote><p>With <strong>trap</strong> mechanism</p></blockquote></li><li><p>Timer interrupt handler <strong>yields</strong> CPU to <strong>thread scheduler</strong></p><ol><li><p>Call <code>yield()</code> to acquire process’s <strong>lock</strong>, change process’s <strong>state</strong> to <code>RUNNABLE</code> and call <code>sched()</code></p></li><li><p><code>sched()</code> do some checks and call <code>swtch</code></p></li><li><p><code>swtch</code>:</p><ol><li><p>Store kernel process’s <strong>registers</strong> into a <code>context</code></p><blockquote><p><code>context</code> is stored in corresponding <strong>user process structure</strong>;</p></blockquote></li><li><p>Convert to this <strong>CPU’s scheduler process</strong> by restoring its <code>context</code> thus jumping to <code>swtch()</code> called before</p><blockquote><p>Every CPU has a <strong>scheduler process</strong> also in <strong>kernel</strong>;</p><p>Scheduler process’s <code>context</code> is stored in its <strong>CPU structure</strong></p></blockquote></li><li><p>Continue executing <code>scheduler()</code></p></li></ol><blockquote><p><code>swtch</code> needs to save/restore only the <strong>callee-save registers</strong> because it is called as a <strong>C function</strong> thus <strong>caller-save registers</strong> saved automatically</p></blockquote></li><li><p><code>scheduler()</code> switch another <code>RUNNABLE</code> process to <code>RUNNING</code></p><ol><li>Release process’s <strong>lock</strong></li><li>Find another <code>RUNNABLE</code> process</li><li>Call <code>swtch</code></li></ol></li><li><p><code>swtch</code></p><ol><li>Store this <strong>CPU’s scheduler process</strong> <code>context</code></li><li><strong>Restore</strong> another kernel process’s <code>context</code> thus jumping to <code>swtch()</code> called before</li><li>Another kernel finish <strong>timer interrupt</strong> and return to <strong>user space</strong></li></ol></li></ol></li></ol><blockquote><p>Other interrupts causing <strong>thread waiting</strong> are similar to timer interrupt</p></blockquote></li></ul><h3 id="task-analysis-3" tabindex="-1"><a class="header-anchor" href="#task-analysis-3" aria-hidden="true">#</a> Task Analysis</h3><h4 id="task-1-uthread-switching-between-threads" tabindex="-1"><a class="header-anchor" href="#task-1-uthread-switching-between-threads" aria-hidden="true">#</a> Task 1: Uthread: switching between threads</h4><ul><li><p>Complete <strong>thread structure</strong>: add <code>context</code></p></li><li><p>Complete <code>thread_create()</code>:</p><ul><li>Set <code>context.ra</code> to execute the function passed</li><li>Set <code>contest.sp</code> to execute on its own stack</li></ul><p>when <code>thread_schedule()</code> runs a given thread for the first time</p></li><li><p>Complete <code>thread_schedule()</code>: add calling <code>thread_swtich</code></p></li><li><p>Complete <code>thread_switch</code>: simulate <code>swtch</code></p></li></ul><h4 id="task-2-using-threads" tabindex="-1"><a class="header-anchor" href="#task-2-using-threads" aria-hidden="true">#</a> Task 2: Using threads</h4><ul><li>Definition and Initialization of lock</li><li>Use of lock</li></ul><h4 id="task-3-barrier" tabindex="-1"><a class="header-anchor" href="#task-3-barrier" aria-hidden="true">#</a> Task 3: Barrier</h4><ul><li>Definition and Initialization of lock</li><li>Use of lock</li></ul><h2 id="lab-8-locks" tabindex="-1"><a class="header-anchor" href="#lab-8-locks" aria-hidden="true">#</a> Lab 8: locks</h2><h3 id="basic-theory-4" tabindex="-1"><a class="header-anchor" href="#basic-theory-4" aria-hidden="true">#</a> Basic Theory</h3><h3 id="task-analysis-4" tabindex="-1"><a class="header-anchor" href="#task-analysis-4" aria-hidden="true">#</a> Task Analysis</h3><h4 id="task1-memory-allocator" tabindex="-1"><a class="header-anchor" href="#task1-memory-allocator" aria-hidden="true">#</a> Task1: Memory allocator</h4><h4 id="task2-buffer-cache" tabindex="-1"><a class="header-anchor" href="#task2-buffer-cache" aria-hidden="true">#</a> Task2: Buffer cache</h4><h2 id="lab-9-file-system" tabindex="-1"><a class="header-anchor" href="#lab-9-file-system" aria-hidden="true">#</a> Lab 9: file system</h2><h3 id="basic-theory-5" tabindex="-1"><a class="header-anchor" href="#basic-theory-5" aria-hidden="true">#</a> Basic Theory</h3><blockquote><p>The file system we talk about below is in XV6’s pattern</p></blockquote><h4 id="_1-disk-level" tabindex="-1"><a class="header-anchor" href="#_1-disk-level" aria-hidden="true">#</a> 1 Disk Level</h4><p><em>Disk layout:</em></p><ul><li>Block0: <strong>boot</strong> block, launch operation system</li><li>Block1: super <strong>block</strong>, describe file system</li><li>Block2 - Block46: <strong>metadata</strong> block <ul><li>Block2 - Block31: <strong>log</strong></li><li>Block32 - Block45: <strong>inode</strong></li><li>Block46: <strong>bitmap</strong> block</li></ul></li><li>Block47 - Block n (954 in total): <strong>data</strong> block</li></ul><h4 id="_2-buffer-cache-level" tabindex="-1"><a class="header-anchor" href="#_2-buffer-cache-level" aria-hidden="true">#</a> 2 Buffer Cache Level</h4><blockquote><p>We use <em><u>buffer cache</u></em> to represent all the cache, use <em><u>block cache</u></em> to represent a certain block in buffer cache</p></blockquote><p><em>Allocate an inode / <code>ialloc()</code>:</em></p><ul><li><p>Visit all inode blocks by <code>bread()</code>, check if it is free then use it, and <code>brelse()</code></p></li><li><p><code>bread()</code>:</p><ol><li><p>Call <code>bget()</code> to get this block’s cache / <code>bget()</code>:</p><ol><li><p><code>acquire()</code> **buffer cache’**s <code>spinlock</code></p></li><li><p>Visit <strong>all block caches</strong> to find if this block is already cached, if yes:</p><ol><li><p>Increase this block cache’s <code>refcnt</code></p></li><li><p><code>release()</code> **buffer cache’**s <code>spinlock</code></p></li><li><p><code>acquiresleep()</code> <strong>block cache</strong>’s <code>sleeplock</code></p><blockquote><p>Anytime only one process can use a block cache, and it may cause much time to handle it. So there must be a <code>sleeplock</code></p></blockquote></li></ol></li><li><p>If not cached, recycle the <strong>LRU free block cache</strong> (<code>panic()</code> if no free block cache)</p><ol><li>If <code>refcnt</code> equals zero, then it is free. Set some fields of this block cache</li><li><code>release()</code> **buffer cache’**s <code>spinlock</code></li><li><code>acquiresleep()</code> <strong>block cache</strong>’s <code>sleeplock</code></li></ol></li></ol><blockquote><p>One disk block can only have one block cache, or error may occur. So there must be a <code>spinlock</code> to protect buffer cache</p></blockquote></li><li><p>Read from <strong>disk</strong> if it is <strong>not valid</strong></p></li><li><p>Return the block cache</p></li></ol></li><li><p><code>brelse()</code>:</p><ol><li><code>releasesleep()</code> block cache’s <code>sleeplock</code></li><li><code>acquire()</code> buffer cache’s <code>spinlock</code></li><li>Decrease this block cache’s <code>refcnt</code></li><li>If no process is waiting for this block cache (<code>refcnt==0</code>), then follow <strong>LRU</strong> to locate this block cache in buffer</li><li><code>release()</code> buffer cache’s <code>spinlock</code></li></ol></li></ul><h4 id="_3-logging-level" tabindex="-1"><a class="header-anchor" href="#_3-logging-level" aria-hidden="true">#</a> 3 Logging Level</h4><p><em><strong>Crash</strong> includes:</em></p><ul><li>Power fault</li><li>Core <code>panic()</code></li></ul><blockquote><p>Exclude disk fault like data missing</p></blockquote><hr><p><em><strong>Key</strong> point:</em></p><ul><li>The <strong>atomicity</strong> of multiple operation of <strong>writing block</strong>, not the <strong>order</strong></li><li><strong>Fast recovery</strong></li></ul><hr><p><em><strong>Thoughts</strong> about logging:</em></p><ol><li><p><em>Write log</em>: <strong>write data to log</strong> when requiring to write file system</p></li><li><p><em>Commit op</em>: <strong>Record numbers</strong> representing a groups of file system <strong>writing</strong> when they totally finish and <strong>store data in log</strong></p><blockquote><p>Follow “<strong>write ahead rule</strong>”: before committing, all the written data must be in the log</p></blockquote></li><li><p><em>Install log</em>: <strong>Move</strong> log’s blocks’ data to file system’s blocks when really ready to execute these writing</p></li><li><p><em>Clean log</em>: <strong>Clean records</strong> after installing log</p></li></ol><hr><p><em><strong>A Log’s Structure</strong></em>:</p><ul><li><strong>Header block</strong>: valid <strong>log block amount</strong> and <strong>disk block number</strong> each log block corresponding</li><li><strong>Log’s data block</strong>: actual blocks’ data to store in disk</li></ul><hr><p><em><strong>Implementation of Logging:</strong></em></p><ul><li><p><code>begin_op()</code></p><ol><li><code>acquire()</code> log’s lock</li><li>If log is <strong>committing</strong>, sleep</li><li>If <strong>concurrent operation amount</strong> (<code>outstanding</code>) is over upper limit, sleep</li><li>If not the above two cases, increase <code>outstanding</code>, <code>release()</code> lock and continue</li></ol></li><li><p><code>log_write()</code>: update <strong>log header in memory</strong> including block number and block amount</p></li><li><p><code>end_op()</code></p><ol><li><p><code>acquire()</code> log’s lock</p></li><li><p>Decrease <code>outstanding</code></p></li><li><p>If this is the last outstanding operation (<code>outsanding == 0</code>), mark it, else <code>wakeup()</code> sleeping process in <code>begin_op()</code></p></li><li><p><code>release()</code> log’s lock</p></li><li><p><code>commit()</code> if marked above</p><ol><li><p><code>write_log()</code>(write log): <strong>write</strong> block’s data from <strong>buffer cache</strong> to disk <strong>log</strong> according to log header in memory</p><blockquote><p><code>bwrite()</code> will be used in <code>write_log()</code>, but should not be directly used without logging</p></blockquote></li><li><p><code>write_head()</code>(commit op): write <strong>log header</strong> into disk log’s header block</p><blockquote><p>Inside <code>write_head()</code> is a <code>bwrite()</code> call which is the actual “<strong>commit point</strong>”</p></blockquote></li><li><p><code>install_trans()</code>(install)</p></li><li><p>Set log header <code>n</code>(amount) to 0 and <code>write_head()</code>(clean log)</p></li></ol></li></ol></li></ul><hr><p><em>File System <strong>Recovering</strong>:</em></p><blockquote><p><code>initlog() -&gt; recover_from_log()</code></p></blockquote><ol><li><code>read_head()</code> to read <strong>log header</strong> from disk into memory</li><li><code>install_trans()</code></li></ol><h4 id="_4-inode-level" tabindex="-1"><a class="header-anchor" href="#_4-inode-level" aria-hidden="true">#</a> 4 Inode Level</h4><p><em>Inode Structure’s Fields:</em></p><ul><li><code>type</code>: file or directory, or this inode is free</li><li><code>nlink</code>: count how many file names link to this inode</li><li><code>size</code>: file or directory data bytes</li><li>12 Direct block numbers: direct index to data block</li><li>1 Indirect block number: one level indirect indiex to data block</li></ul><hr><p><em>Find nth byte in a file:</em></p><ol><li><code>n / block_size</code> leads to the <strong>block number</strong></li><li><code>n % block_size</code> leads to the <strong>byte offset</strong> in a block</li></ol><h4 id="_5-directory-level" tabindex="-1"><a class="header-anchor" href="#_5-directory-level" aria-hidden="true">#</a> 5 Directory Level</h4><blockquote><p>Directory index block also follows index structrue above</p></blockquote><p><em>Directory Data Block Structure / <strong>Directory entries</strong>:</em></p><ul><li>16 bytes per entry <ul><li>First 2 bytes: subdirectory’s or file’s <strong>inode number</strong></li><li>Next 14 bytes: subdirectory’s or file’s <strong>name</strong></li></ul></li></ul><hr><p><em>Find a pathname:</em></p><ol><li>Begin with <strong><code>root </code> inode</strong> having index number 1 in XV6</li><li>Scan <strong><code>root</code>’s data blocks</strong> find the first level pathname’s corresponding <strong>index number</strong></li><li>Follow <strong>index number</strong> to find deeper level pathname in the data blocks</li><li>Repeat above steps until find the correct file or meet error</li></ol><hr><p><em>Create a file and firstly write data into it:</em></p><ol><li><strong>Allocate an inode</strong> and write <code>type</code>, <code>nlink</code> and other infomation in it</li><li>Find parent directory and <strong>create a new entry</strong> in its data block</li><li>Modify <strong>parent directory’s inode</strong>: <em>size</em> and so on</li><li>Scan <code>bitmap</code> to find an unused <strong>data block</strong> for new file to write and update <code>bitmap</code></li><li>Modify <strong>new file’s inode</strong>: <em>size</em>, <em>direct block number</em> and so on</li></ol><h4 id="_6-pathname-level" tabindex="-1"><a class="header-anchor" href="#_6-pathname-level" aria-hidden="true">#</a> 6 Pathname Level</h4><h4 id="_7-file-descriptor-level" tabindex="-1"><a class="header-anchor" href="#_7-file-descriptor-level" aria-hidden="true">#</a> 7 File Descriptor Level</h4><h3 id="task-analysis-5" tabindex="-1"><a class="header-anchor" href="#task-analysis-5" aria-hidden="true">#</a> Task Analysis</h3><h4 id="task1-large-files" tabindex="-1"><a class="header-anchor" href="#task1-large-files" aria-hidden="true">#</a> Task1: Large files</h4><ul><li>Modify the <strong>index address layout</strong> and inode structure in fs.h and file.h</li><li>Modify the <strong>index address map method</strong> in <code>bmap()</code><ul><li>Simulate singly-indirect block map in <code>bmap()</code></li><li><code>bread()</code> and <code>brelse()</code> an index block</li><li>Call <code>balloc()</code> if index or data block is not allocated</li><li>Call <code>log_write()</code> if index block is modified</li><li>Comprehend the arithmetical operation of <code>bn</code></li></ul></li><li>Modify the <strong>data and index block releasing method</strong> in <code>itrunc()</code><ul><li>Simulate singly-indirect block free in <code>itrunc()</code></li></ul></li></ul><h4 id="task2-symbolic-links" tabindex="-1"><a class="header-anchor" href="#task2-symbolic-links" aria-hidden="true">#</a> Task2: Symbolic links</h4><ul><li><strong>Create</strong> symbolic link in <code>sys_symlink()</code><ul><li><code>create()</code> with type <code>T_SYMLINK</code> and name <code>path</code></li><li><code>writei()</code> <code>target</code> to inode’s data block</li></ul></li><li><strong>Use</strong> symbolic link in <code>sys_open()</code><ul><li>Add codes <strong>after getting inode</strong></li><li>Follow the symbolic link to update inode, if the type is <code>T_SYMLINK</code> and <code>O_NOFOLLOW</code> is not flagged</li></ul></li></ul><h2 id="lab10-mmap" tabindex="-1"><a class="header-anchor" href="#lab10-mmap" aria-hidden="true">#</a> Lab10: mmap</h2><h3 id="basic-theory-6" tabindex="-1"><a class="header-anchor" href="#basic-theory-6" aria-hidden="true">#</a> Basic Theory</h3><ul><li>Goals of memory mapped files: handle files with <strong>memory related instructions</strong> like <code>load</code> and <code>store</code></li><li>Thoughts about <strong>eager mmap</strong>: <ul><li>Copy the whole file to memory by <strong>offset and length</strong>, allocating pages</li><li><strong>Unmap and write back dirty block</strong> after finishing handling the file</li></ul></li><li>Thoughts about <strong>lazy mmap</strong>: <ul><li><em><strong>Lazy:</strong></em> Just <strong>store VMA</strong> (Virtual Memory Area) which contains information about file in process structure but do not allocate pages</li><li><em><strong>Allocate:</strong></em> Lazily allocate pages when actually reading or writing mmap file causing <strong>page fault</strong></li></ul></li></ul><h3 id="task-analysis-6" tabindex="-1"><a class="header-anchor" href="#task-analysis-6" aria-hidden="true">#</a> Task Analysis</h3><h4 id="task1-mmap" tabindex="-1"><a class="header-anchor" href="#task1-mmap" aria-hidden="true">#</a> Task1: mmap</h4><blockquote><p>Just follow thought in basic theory with the help of hints in guide book</p></blockquote><ol><li><em><strong>Lazy</strong></em> (in <code>sys_mmap()</code>)</li><li><em><strong>Allocate</strong></em>: Besides basic theory above: (in <code>mmap_alloc()</code>) <ul><li>It is also required to handle <strong>permissions</strong> about file</li><li>Use <strong>inode</strong> to read file (<code>readi()</code>)</li></ul></li><li><em><strong>Release</strong></em>: (in <code>sys_munmap()</code>) <ul><li>Call <code>filewrite()</code> if <code>MAP_SHADED</code></li><li>Call <code>uvmunmap()</code> to unmap the file’s part in memory</li><li>Call <code>fileclose()</code> if unmap all the file in memory</li><li>Also delete unnecessary <code>panic()</code> in <code>uvmcopy()</code> and <code>uvmunmap()</code></li></ul></li><li><em><strong>Kernel</strong></em>: <ul><li><code>exit()</code></li><li><code>fork() </code></li></ul></li></ol>',109),s=[l];function a(n,c){return o(),t("div",null,s)}const p=e(i,[["render",a],["__file","XV6LabSummary.html.vue"]]);export{p as default};
