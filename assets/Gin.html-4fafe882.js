import{_ as e,V as o,W as c,X as n,Y as s,Z as t,a1 as p,F as i}from"./framework-d934f75f.js";const u={},l=n("h2",{id:"_1-快速入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-快速入门","aria-hidden":"true"},"#"),s(" 1 快速入门")],-1),r=n("h3",{id:"_1-1-概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-概述","aria-hidden":"true"},"#"),s(" 1.1 概述")],-1),d={href:"https://gin-gonic.com/zh-cn/",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>Gin是一个Go(Golang)编写的轻量级http web框架，运行速度非常快。</p><p>Gin最擅长的就是<strong>Api接口的高并发</strong>，如果项目的规模不大，业务相对简单，推荐使用Gin</p><p>当某个接口的性能遭到较大挑战的时候，这个还是可以考虑<strong>使用Gin重写接口</strong></p><h3 id="_1-2-环境搭建" tabindex="-1"><a class="header-anchor" href="#_1-2-环境搭建" aria-hidden="true">#</a> 1.2 环境搭建</h3><p>根据官网文档引入gin包</p><blockquote><p>可能需要提前创建项目才能<code>go get</code></p></blockquote><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建默认的路由引擎</span>
	r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 配置路由</span>
	r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/ping&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
			<span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;pong&quot;</span><span class="token punctuation">,</span>
		<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// 监听并在 0.0.0.0:8000 上启动服务</span>
	r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8000&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-热加载" tabindex="-1"><a class="header-anchor" href="#_1-3-热加载" aria-hidden="true">#</a> 1.3 热加载</h3><p>所谓热加载就是当我们对代码进行修改时，程序能够自动重新加载并执行，这在我们开发中是非常便利的，可以快速进行代码测试，省去了每次手动重新编译</p><p>在gin中我们要实现热加载可以借助<strong>第三方工具</strong></p>`,10),v=n("p",null,[n("code",null," go install github.com/pilu/fresh@latest")],-1),m=n("p",null,[n("code",null,"go get github.com/pilu/fresh")],-1),g=n("p",null,[n("code",null,"fresh")],-1),b={href:"https://github.com/gravityblast/fresh",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,[n("code",null,"go get -u github.com/codegangsta/gin")],-1),q=n("p",null,[n("code",null,"gin run main.go")],-1),f={href:"https://github.com/codegangsta/gin",target:"_blank",rel:"noopener noreferrer"},x=p(`<h2 id="_2-路由" tabindex="-1"><a class="header-anchor" href="#_2-路由" aria-hidden="true">#</a> 2 路由</h2><h3 id="_2-1-路由概述" tabindex="-1"><a class="header-anchor" href="#_2-1-路由概述" aria-hidden="true">#</a> 2.1 路由概述</h3><p>路由（Routing）是由一个 <strong><u>URI</u></strong>（或者叫路径）和一个特定的 <strong><u>HTTP 方法</u></strong>（GET、POST 等）组成的，涉及到应用如何<strong>响应客户端</strong>对某个网站节点的访问</p><h3 id="_2-2-路由配置" tabindex="-1"><a class="header-anchor" href="#_2-2-路由配置" aria-hidden="true">#</a> 2.2 路由配置</h3><p><em>获得路由：</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>github.com/gin-gonic/gin</code>包</p></blockquote><p><em>静态路由举例：</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span>HTTP方法<span class="token punctuation">(</span><span class="token string">&quot;/路径&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;HTTP方法&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以使用<code>http.StatusOK</code>代替<code>200</code></p></blockquote><p><em>动态路由举例：</em></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/:uid&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  uid <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> 
  c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;userID=%s&quot;</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-响应数据" tabindex="-1"><a class="header-anchor" href="#_2-3-响应数据" aria-hidden="true">#</a> 2.3 响应数据</h3><p><em>响应字符串：</em></p><ul><li><code>c.String(code int, format string, values ...any)</code></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/:uid&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  uid <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> 
  c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;userID=%s&quot;</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><em>响应JSON：</em></p><ul><li><p>构造<code>map</code>的方式：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/someJSON&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 方式一：自己拼接 JSON </span>
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>
        <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Hello world!&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以用自定义类型<code>gin.H</code>代替<code>map[string]interface{}</code></p></blockquote></li><li><p>构造<code>struct</code>的方式：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/moreJSON&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 方法二：使用结构体 </span>
    <span class="token keyword">var</span> msg <span class="token keyword">struct</span> <span class="token punctuation">{</span> 
        Name <span class="token builtin">string</span> <span class="token string">\`json:&quot;user&quot;\`</span> 
        Message <span class="token builtin">string</span> 
        Age <span class="token builtin">int</span> 
    <span class="token punctuation">}</span>
    msg<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;IT 营学院&quot;</span> 
    msg<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token string">&quot;Hello world!&quot;</span> 
    msg<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span> 
    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> msg<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><p><em>响应JSONP：</em></p><ul><li>与JSON类似，不同的地方在于，请求路径中可以有<code>callback</code>参数，返回“<strong>执行回调</strong>”的形式</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/JSONP&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    data <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span> 
        <span class="token string">&quot;foo&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> 
    <span class="token punctuation">}</span>
    <span class="token comment">// /JSONP?callback=xxx </span>
    <span class="token comment">// 将返回：xxx({\\&quot;foo\\&quot;:\\&quot;bar\\&quot;}) </span>
    c<span class="token punctuation">.</span><span class="token function">JSONP</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> data<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果是普通的JSON响应，则不会返回<code>xxx(JSONstr)</code>这种形式，只有一个<code>JSONstr</code></li></ul><hr><p><em>响应XML：</em></p><ul><li>与JSON用法几乎完全相同，就是api换成了<code>c.XML</code></li></ul><hr><p><em>渲染HTML模板：</em></p><blockquote><p>举例的渲染方法见下一节</p></blockquote><ul><li><p>首先可以执行<code>router.LoadHTMLGlob(&quot;templates/*&quot;) </code>加载所有模板</p><blockquote><p>这就需要在项目根目录下创建一个<code>templates</code>文件夹，里面存在<code>html</code>文件</p></blockquote></li><li><p><code>c.HTML(http.StatusOK, &quot;xxx.html&quot;, gin.H{...服务器数据})</code></p></li></ul><h3 id="_2-4-路由传值" tabindex="-1"><a class="header-anchor" href="#_2-4-路由传值" aria-hidden="true">#</a> 2.4 路由传值</h3><p><em>GET传值：</em></p><ul><li><p>query参数（<code>?key=value&amp;key=value</code>）：</p><ul><li><code>c.Query(&quot;key&quot;)</code></li><li><code>c.DefaultQuery(&quot;key&quot;, defaultValue string)</code></li></ul></li><li><p>动态路由传值/路径参数/param参数：<code>c.Param(&quot;key&quot;)</code></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// /path/:pathVariable</span>
r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user/:uid&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    uid <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span> 
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;userID=%s&quot;</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><p><em>POST传值：</em></p><ul><li>表单参数：<code>c.PostForm(&quot;key&quot;)</code>、<code>c.DefaultPostForm(&quot;key&quot;, defaultValue)</code></li></ul><hr><p><em>绑定到结构体：</em></p><ul><li><p>可以提取<strong>JSON、form表单、QueryString类型</strong>的参数到结构体中，key需要和结构体的字段对应</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//注意首字母大写 </span>
<span class="token keyword">type</span> Userinfo <span class="token keyword">struct</span> <span class="token punctuation">{</span> 
    Username <span class="token builtin">string</span> <span class="token string">\`form:&quot;username&quot; json:&quot;user&quot;\`</span> 
    Password <span class="token builtin">string</span> <span class="token string">\`form:&quot;password&quot; json:&quot;password&quot;\`</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里主要是<code>form</code>标签在起作用，<code>json</code>只是结构体转换成JSON后的key</p><blockquote><p>无论是<code>form</code>还是<code>json</code>，结构体成员都要有公开访问权限</p></blockquote></blockquote></li><li><p>GET传值绑定到结构体：注意要传<strong>地址</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">var</span> userinfo Userinfo 
    <span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>userinfo<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> 
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> userinfo<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> 
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>
            <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>POST传值绑定到结构体：用法相同</p></li><li><p>XML绑定到结构体：</p><ul><li><code>bytesSlice, _ := c.GetRawData()</code></li><li><code>xml.Unmarshal(bytesSlice, any)</code></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Article <span class="token keyword">struct</span> <span class="token punctuation">{</span> 
    Title <span class="token builtin">string</span> <span class="token string">\`xml:&quot;title&quot;\`</span> 
    Content <span class="token builtin">string</span> <span class="token string">\`xml:&quot;content&quot;\`</span> 
<span class="token punctuation">}</span>
<span class="token comment">/*...*/</span>
router<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">&quot;/xml&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">GetRawData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 从 c.Request.Body 读取请求数据</span>
    article <span class="token operator">:=</span> <span class="token operator">&amp;</span>Article<span class="token punctuation">{</span><span class="token punctuation">}</span> 
    <span class="token keyword">if</span> err <span class="token operator">:=</span> xml<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> 
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> article<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_2-5-路由分组" tabindex="-1"><a class="header-anchor" href="#_2-5-路由分组" aria-hidden="true">#</a> 2.5 路由分组</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|-root
	|-main.go
	|-routers
		|-xxxRouter.go
		|-xxxxRouter.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// main.go</span>
<span class="token keyword">import</span> <span class="token punctuation">(</span> 
    <span class="token string">&quot;gin_demo/routers&quot;</span>
    <span class="token string">&quot;github.com/gin-gonic/gin&quot;</span>
<span class="token punctuation">)</span>
<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    routers<span class="token punctuation">.</span><span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
    routers<span class="token punctuation">.</span><span class="token function">XxxRoutes</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
    router<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;:port&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xxxRouter.go</span>
<span class="token keyword">package</span> routers
<span class="token comment">/*...*/</span>
<span class="token keyword">func</span> <span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>router <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    adminRouter <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> 
        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;用户&quot;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;news&quot;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>路由分组的语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rGroup = router.Group(&quot;/xxxgroup&quot;)
{
	rGroup.HTTP方法(...)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上面这种写法还不是最终版本，之后结合<strong>控制器</strong>会再改动</p></li></ul><h2 id="_3-html模板渲染" tabindex="-1"><a class="header-anchor" href="#_3-html模板渲染" aria-hidden="true">#</a> 3 HTML模板渲染</h2><h2 id="_4-控制器、中间件" tabindex="-1"><a class="header-anchor" href="#_4-控制器、中间件" aria-hidden="true">#</a> 4 控制器、中间件</h2><h3 id="_4-1-控制器" tabindex="-1"><a class="header-anchor" href="#_4-1-控制器" aria-hidden="true">#</a> 4.1 控制器</h3><p><em>控制器架构：</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>|- root
	|- main.go
	|- routers
	|- controllers
		|- controlerDir1
			|- xxxController.go
        |- controlerDir2
			|- xxxxController.go
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xxxRouter.go</span>
<span class="token keyword">package</span> routers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;gin_demo/controllers/xxx&quot;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">)</span>
<span class="token comment">/*...*/</span>
<span class="token keyword">func</span> <span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>router <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    adminRouter <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> 
        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> xxx<span class="token punctuation">.</span>UserMethod<span class="token punctuation">)</span>
        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span> xxx<span class="token punctuation">.</span>NewsMethod<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xxxController.go</span>
<span class="token keyword">package</span> xxx
<span class="token comment">/*...*/</span>
<span class="token keyword">func</span> <span class="token function">UserMethod</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;用户&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">NewsMethod</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;news&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其实没有什么特殊的语法，就是把原来的匿名函数划分到不同的<code>controller</code>文件中了</li></ul><hr><p><em>控制器继承：</em></p><ul><li>就是把函数挂载到<strong>结构体的方法</strong>上</li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xxxBaseController.go</span>
<span class="token keyword">package</span> admin 

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">&quot;net/http&quot;</span> <span class="token string">&quot;github.com/gin-gonic/gin&quot;</span> 
<span class="token punctuation">)</span>

<span class="token keyword">type</span> BaseController <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c BaseController<span class="token punctuation">)</span> <span class="token function">Success</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    ctx<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c BaseController<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    ctx<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;失败&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xxxController.go</span>
<span class="token keyword">package</span> xxx
<span class="token comment">/*...*/</span>
<span class="token keyword">type</span> UserController <span class="token keyword">struct</span><span class="token punctuation">{</span>
    <span class="token comment">// 继承的结构体controller</span>
    BaseController
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ucon UserController<span class="token punctuation">)</span> <span class="token function">User</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token keyword">if</span> xxx <span class="token punctuation">{</span>
	    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;用户&quot;</span><span class="token punctuation">)</span>    
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        ucon<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ucon UserController<span class="token punctuation">)</span> <span class="token function">News</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">&quot;news&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// xxxRouter.go</span>
<span class="token keyword">package</span> routers

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;gin_demo/controllers/xxx&quot;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">)</span>
<span class="token comment">/*...*/</span>
<span class="token keyword">func</span> <span class="token function">AdminRoutesInit</span><span class="token punctuation">(</span>router <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    adminRouter <span class="token operator">:=</span> router<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">&quot;/admin&quot;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">{</span> 
        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/user&quot;</span><span class="token punctuation">,</span> xxx<span class="token punctuation">.</span>UserController<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>User<span class="token punctuation">)</span>
        adminRouter<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span> xxx<span class="token punctuation">.</span>UserController<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>News<span class="token punctuation">)</span> 
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样路由就只负责配置请求的路径关系，业务逻辑都由控制器处理</li></ul><h3 id="_4-2-中间件" tabindex="-1"><a class="header-anchor" href="#_4-2-中间件" aria-hidden="true">#</a> 4.2 中间件</h3><p><em>中间件概述：</em></p><ul><li><p>Gin 框架允许开发者在处理请求的过程中，加入用户自己的钩子（Hook）函数。这个钩子函数就叫中间件</p><blockquote><p>中间件适合处理一些公共的业务逻辑，比如登录认证、权限校验、数据分页、记录日志、耗时统计等</p></blockquote></li><li><p>通俗的讲：中间件就是**请求处理前后（但都是<u>正式响应之前</u>）**执行的一系列操作</p><blockquote><p>有点像<strong>切面AOP</strong></p></blockquote></li></ul><hr><p><em>路由中间件：</em></p><ul><li><p>在路由函数中加入多个回调函数，最后一个回调函数用于处理请求并响应，前面的回调函数都是<strong>中间件</strong></p><blockquote><p>例如GET方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>group <span class="token operator">*</span>RouterGroup<span class="token punctuation">)</span> <span class="token function">GET</span><span class="token punctuation">(</span>relativePath <span class="token builtin">string</span><span class="token punctuation">,</span> handlers <span class="token operator">...</span>HandlerFunc<span class="token punctuation">)</span> IRoutes <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote></li><li><p>在中间件中，可以调用<code>c.Next()</code>，直接去执行下一个处理程序，</p><ul><li>它可能是<strong>下一个中间件</strong>，即<strong>中间件</strong>会按照在路由函数中注册的顺序<strong>依次执行</strong></li><li>也可能<strong>就是最后一个回调函数</strong>，即对<strong>请求的处理</strong>（但<u>没有正式响应</u>），然后再回到中间件执行<code>c.Next()</code>后的语句</li></ul><blockquote><p>也就是在<strong>处理请求的业务逻辑前后</strong>分别执行语句，然后再返回</p><p>如果没有<code>c.Next()</code>，则会在执行完中间件中的所有语句后再响应请求</p></blockquote></li><li><p>在中间件中，也可以调用<code>c.Abort()</code>，说明直接不再执行后续的中间件和业务逻辑处理请求，返回空。但同一中间件中<code>c.Abort()</code>后的语句会正常执行。</p></li></ul><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//main.go</span>
<span class="token keyword">func</span> <span class="token function">initMiddleware1</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;中间件1---before request process&quot;</span><span class="token punctuation">)</span> 
    ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;中间件1---after request process&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">initMiddleware2</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;中间件2---before request process&quot;</span><span class="token punctuation">)</span> 
    ctx<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// ctx.Abort()</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;中间件2---after request process&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> initMiddleware1<span class="token punctuation">,</span> initMiddleware2<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        ctx<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;首页--中间件演示&quot;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/news&quot;</span><span class="token punctuation">,</span> initMiddleware1<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        ctx<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&quot;新闻页面--中间件演示&quot;</span><span class="token punctuation">)</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">&quot;:8080&quot;</span><span class="token punctuation">)</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><em>全局中间件：</em></p><ul><li>上面讲的路由中间件是针对<strong>单独一个路由</strong>的，可以理解成不是全局的</li><li><strong>全局中间件的注册</strong>方法：<code>r.Use(middleWare1, middleWare2, ...)</code><ul><li>这样在匹配所有路由时都会执行</li></ul></li></ul><hr><p><em>路由分组中间件：</em></p><ul><li>方式一：<code>r.Group(&quot;/path&quot;, middleWare1, middleWare2)</code></li><li>方式二：<code>groupRouter.Use(middleWare1, middleWare2)</code></li></ul><hr><p><em>中间件、控制器数据共享：</em></p><ul><li>设置值：<code>ctx.Set(&quot;key&quot;, &quot;value&quot;)</code></li><li>获取值：<code>ctx.Get(&quot;key&quot;, &quot;value&quot;)</code></li></ul><p>…</p><h2 id="_5-cookie-与-session" tabindex="-1"><a class="header-anchor" href="#_5-cookie-与-session" aria-hidden="true">#</a> 5 Cookie 与 Session</h2><p>…</p><h2 id="_6-gin-连接-mysql" tabindex="-1"><a class="header-anchor" href="#_6-gin-连接-mysql" aria-hidden="true">#</a> 6 Gin 连接 MySQL</h2>`,80);function y(w,_){const a=i("ExternalLinkIcon");return o(),c("div",null,[l,r,n("blockquote",null,[n("p",null,[n("a",d,[s("https://gin-gonic.com/zh-cn/"),t(a)])])]),k,n("ul",null,[n("li",null,[v,m,g,n("blockquote",null,[n("p",null,[n("a",b,[s("https://github.com/gravityblast/fresh"),t(a)])])])]),n("li",null,[h,q,n("blockquote",null,[n("p",null,[n("a",f,[s("https://github.com/codegangsta/gin"),t(a)])])])])]),x])}const G=e(u,[["render",y],["__file","Gin.html.vue"]]);export{G as default};
