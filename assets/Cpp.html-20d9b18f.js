import{_ as n,W as t,X as i,a2 as l,Y as e,Z as a}from"./framework-3800c176.js";const r={},s=l('<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C++</h1><h2 id="_1-basic-c" tabindex="-1"><a class="header-anchor" href="#_1-basic-c" aria-hidden="true">#</a> 1 Basic C++</h2><h3 id="variable-type" tabindex="-1"><a class="header-anchor" href="#variable-type" aria-hidden="true">#</a> Variable &amp; Type</h3><h4 id="variable-constant" tabindex="-1"><a class="header-anchor" href="#variable-constant" aria-hidden="true">#</a> <em>Variable &amp; Constant:</em></h4><ul><li><p>Why we need / What is variable: <strong>name a memory space</strong> to operate it conveniently</p></li><li><p>Why we need / What is constant: name a memory space where there is <strong>unchangeable</strong> data</p></li><li><p>How to use variable:</p><ul><li>Declare: <code>type variable_name;</code></li><li>Define: <code>variable_name = variable_value;</code><ul><li>Declare and define: <code>type variable_name = variable_value;</code></li></ul></li></ul></li><li><p>How to use constant:</p><ul><li><p>Declare and define: <code>const type constant_name = constant_value;</code></p><blockquote><p>Constant must be initialized when defined</p></blockquote></li><li><p>Modify</p></li></ul></li></ul><hr><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> <em>Type:</em></h4>',7),o=e("ul",null,[e("li",null,[e("p",null,[e("u",null,"Why we need type:")]),e("ul",null,[e("li",null,[a("store data with different properties and allocate "),e("strong",null,"memory space"),a(" reasonably")])])]),e("li",null,[e("p",null,[e("u",null,"What types does C++ have:")]),e("ul",null,[e("li",null,[e("p",null,"Integer type:"),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Type"),e("th",null,"Memory Usage")])]),e("tbody",null,[e("tr",null,[e("td",null,"bool"),e("td",null,"1 byte")]),e("tr",null,[e("td",null,"char"),e("td",null,"1 byte")]),e("tr",null,[e("td",null,"short"),e("td",null,"2 bytes")]),e("tr",null,[e("td",null,"int"),e("td",null,"4 bytes")]),e("tr",null,[e("td",null,"long"),e("td",null,"4 bytes")]),e("tr",null,[e("td",null,"long long"),e("td",null,[a("If 32-bit Linux, 4 bytes,"),e("br"),a("If 64-bit Linux, 8 bytes,"),e("br"),a("If Windows, 4 byte")])])])])]),e("li",null,[e("p",null,"Floating-point type:"),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"Type"),e("th",null,"Memory Usage")])]),e("tbody",null,[e("tr",null,[e("td",null,"float"),e("td",null,"4 bytes")]),e("tr",null,[e("td",null,"double"),e("td",null,"8 bytes")])])])])])]),e("li",null,[e("p",null,[e("u",null,"How to handle with types:")]),e("ul",null,[e("li",null,[e("p",null,[a("Get "),e("strong",null,"memory usage"),a(" of a type:")]),e("ul",null,[e("li",null,[e("code",null,"sizeof(type_or_variable)")]),e("li",null,"Unit: byte")])]),e("li",null,[e("p",null,[a("Literal "),e("strong",null,"integer"),a(":")]),e("ul",null,[e("li",null,[a("Default type is "),e("code",null,"int")]),e("li",null,"Base")])]),e("li",null,[e("p",null,[a("Literal "),e("strong",null,"decimal"),a(":")]),e("ul",null,[e("li",null,[e("p",null,[a("Default type is "),e("code",null,"double")]),e("ul",null,[e("li",null,[e("p",null,[a("Append "),e("code",null,"f"),a(" at the end to make it "),e("code",null,"float")]),e("blockquote",null,[e("p",null,[a("Like "),e("code",null,"3.14f")])])])])]),e("li",null,[e("p",null,"Valid number: Default is 6 bits")]),e("li",null,[e("p",null,[a("Scientific notation: "),e("code",null,"e")]),e("blockquote",null,[e("p",null,[e("code",null,"3e2"),a(" means "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mn",null,"3"),e("mo",null,"×"),e("mn",null,"1"),e("msup",null,[e("mn",null,"0"),e("mn",null,"2")])]),e("annotation",{encoding:"application/x-tex"},"3\\times10^2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"×"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8141em"}}),e("span",{class:"mord"},"1"),e("span",{class:"mord"},[e("span",{class:"mord"},"0"),e("span",{class:"msupsub"},[e("span",{class:"vlist-t"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.8141em"}},[e("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[e("span",{class:"pstrut",style:{height:"2.7em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mtight"},"2")])])])])])])])])])])]),e("p",null,[e("code",null,"3e-2"),a(" means "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mn",null,"3"),e("mo",null,"×"),e("mn",null,"1"),e("msup",null,[e("mn",null,"0"),e("mrow",null,[e("mo",null,"−"),e("mn",null,"2")])])]),e("annotation",{encoding:"application/x-tex"},"3\\times10^{-2}")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),e("span",{class:"mord"},"3"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),e("span",{class:"mbin"},"×"),e("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.8141em"}}),e("span",{class:"mord"},"1"),e("span",{class:"mord"},[e("span",{class:"mord"},"0"),e("span",{class:"msupsub"},[e("span",{class:"vlist-t"},[e("span",{class:"vlist-r"},[e("span",{class:"vlist",style:{height:"0.8141em"}},[e("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[e("span",{class:"pstrut",style:{height:"2.7em"}}),e("span",{class:"sizing reset-size6 size3 mtight"},[e("span",{class:"mord mtight"},[e("span",{class:"mord mtight"},"−"),e("span",{class:"mord mtight"},"2")])])])])])])])])])])])])])])])]),e("li",null,[e("p",null,"Character encoding"),e("ul",null,[e("li",null,"ASCII")])])])])],-1),c=l('<hr><h4 id="scope-storage-duration" tabindex="-1"><a class="header-anchor" href="#scope-storage-duration" aria-hidden="true">#</a> <em>Scope &amp; Storage Duration:</em></h4><ul><li><p><u>What is scope:</u> program extent where variable works</p></li><li><p><u>What is storage duration:</u> time when variable works</p></li><li><p><u>What kinds of / How to set scope:</u></p><ul><li><p><strong>Local</strong> scope: local variable</p></li><li><p><strong>Global</strong> scope: global variable or function</p><blockquote><p><code>extern</code> external link</p></blockquote></li><li><p><strong>File</strong> scope:</p><ul><li><code>static</code> global variable or function</li><li>anonymous <code>namespace</code></li></ul></li><li><p><strong>Namespace</strong> scope</p></li><li><p><strong>Class</strong> scope</p></li></ul></li><li><p><u>What kinds of / How to set storage duration:</u></p><ul><li><strong>Automatic</strong> storage duration: local variable</li><li><strong>Static</strong> storage duration <ul><li>Global variable or function</li><li><code>static</code> local variable</li></ul></li><li>Dynamic storage duration: heap</li><li>Thread storage duration: <code>thread_local</code></li></ul></li></ul><h3 id="namespace-standard-library" tabindex="-1"><a class="header-anchor" href="#namespace-standard-library" aria-hidden="true">#</a> Namespace &amp; Standard Library</h3><h4 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> <em>Namespace:</em></h4><ul><li><p><u>What is name space:</u> subset of global scope</p></li><li><p><u>Why to use name space:</u> prevent naming conflict</p></li><li><p><u>How to set namespace:</u> <code>namespace namespace_name { ... }</code></p><blockquote><p>Accumulation</p></blockquote></li><li><p>How to use namespace: in the same scope, or <code>include</code> firstly</p><ul><li><p>Direct reference: <code>namespace_name::variable_name</code></p><blockquote><p>Omit <code>namespace_name</code></p></blockquote></li><li><p>Alias: <code>namespace namespace_alias = np_origin_name</code></p></li><li><p>Import: valid in current scope</p><ul><li><code>using namespace_name::variable_name</code></li><li><code>using namespace namespace_name</code></li></ul></li><li><p>Nest</p></li></ul></li></ul><hr><p>iostream ...</p><h3 id="operators-flow-of-control" tabindex="-1"><a class="header-anchor" href="#operators-flow-of-control" aria-hidden="true">#</a> Operators &amp; Flow of Control</h3><h4 id="operators" tabindex="-1"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> <em>Operators:</em></h4><ul><li>Arithmetic operators</li><li>Assignment operators</li><li>Comparison operators</li><li>Logical operators: <code>||</code> <code>&amp;&amp;</code> <code>!</code></li><li>Bitwise operators: <code>^</code> <code>|</code> <code>&amp;</code> <code>&lt;&lt;</code> <code>&gt;&gt;</code> <code>~</code></li></ul><hr><h4 id="flow-of-control" tabindex="-1"><a class="header-anchor" href="#flow-of-control" aria-hidden="true">#</a> <em>Flow of Control:</em></h4><ul><li>Sequential</li><li>Selective / Case</li><li>Loop</li></ul><h3 id="pointer-array-function" tabindex="-1"><a class="header-anchor" href="#pointer-array-function" aria-hidden="true">#</a> Pointer &amp; Array &amp; Function</h3><h4 id="pointer-reference" tabindex="-1"><a class="header-anchor" href="#pointer-reference" aria-hidden="true">#</a> <em>Pointer &amp; Reference:</em></h4><ul><li><p><u>What is pointer:</u></p><ul><li>Concept: memory space <strong>address</strong></li><li>Size: the size of pointer itself</li></ul></li><li><p><u>What is reference:</u></p><ul><li>Nature: <strong>pointer constant</strong> with convenient operations packaged</li></ul></li><li><p><u>Why we need pointer:</u> manipulate <strong>memory space</strong></p></li><li><p><u>Why we need reference</u>: let the pointer operation more convenient</p></li><li><p><u>How to use pointer:</u></p><ul><li>Get a pointer: address-of operator</li><li>Abuse: null pointer and wild pointer</li><li>Pointer and constant: <code>const type*</code> <code>type* const</code> <code>const type* const</code></li></ul></li><li><p><u>How to use conference:</u></p><ul><li><p>Get a reference:</p><ul><li>Variable reference: <code>type &amp;reference_name = variable_name</code></li><li>Constant reference:</li></ul></li><li><p>With function:</p><ul><li>As function <strong>argument</strong></li><li>As function <strong>return type</strong>: static storage duration, left value</li></ul></li></ul></li></ul><hr><h4 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> <em>Array:</em></h4><ul><li><u>What are features of array:</u></li><li><u>How to use array:</u><ul><li>Relationship between array name and pointer</li></ul></li></ul><hr><h4 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> <em>Function:</em></h4><ul><li></li></ul><h3 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h3><h3 id="preprocess" tabindex="-1"><a class="header-anchor" href="#preprocess" aria-hidden="true">#</a> Preprocess</h3><h4 id="macro" tabindex="-1"><a class="header-anchor" href="#macro" aria-hidden="true">#</a> <em>Macro:</em></h4><ul><li><p>Why macro:</p><ul><li>...</li></ul></li><li><p>How to use macro:</p><ul><li><code>#define macro_name macro_value</code></li><li>...</li></ul></li></ul><h2 id="_2-object-oriented-c" tabindex="-1"><a class="header-anchor" href="#_2-object-oriented-c" aria-hidden="true">#</a> 2 Object-oriented C++</h2><h3 id="_2-1-memory-partition" tabindex="-1"><a class="header-anchor" href="#_2-1-memory-partition" aria-hidden="true">#</a> 2.1 Memory Partition</h3><h3 id="_2-3-class-object" tabindex="-1"><a class="header-anchor" href="#_2-3-class-object" aria-hidden="true">#</a> 2.3 Class &amp; Object</h3><h4 id="encapsulating-access" tabindex="-1"><a class="header-anchor" href="#encapsulating-access" aria-hidden="true">#</a> <em>Encapsulating &amp; Access:</em></h4><ul><li>What is encapsulating: property and behavior</li><li>Why to encapsulate:</li><li></li></ul><h3 id="_2-4-file-stream" tabindex="-1"><a class="header-anchor" href="#_2-4-file-stream" aria-hidden="true">#</a> 2.4 File Stream</h3><h4 id="basic-input-output" tabindex="-1"><a class="header-anchor" href="#basic-input-output" aria-hidden="true">#</a> <em>Basic Input &amp; Output:</em></h4><ul><li><code>cin</code></li><li><code>cout</code></li></ul><h2 id="_3-template-c" tabindex="-1"><a class="header-anchor" href="#_3-template-c" aria-hidden="true">#</a> 3 Template C++</h2><h3 id="_3-1-conceptual-framework" tabindex="-1"><a class="header-anchor" href="#_3-1-conceptual-framework" aria-hidden="true">#</a> 3.1 Conceptual Framework</h3><h3 id="_3-2-function-template" tabindex="-1"><a class="header-anchor" href="#_3-2-function-template" aria-hidden="true">#</a> 3.2 Function Template</h3><h3 id="_3-3-class-template" tabindex="-1"><a class="header-anchor" href="#_3-3-class-template" aria-hidden="true">#</a> 3.3 Class Template</h3><h2 id="_4-c-stl" tabindex="-1"><a class="header-anchor" href="#_4-c-stl" aria-hidden="true">#</a> 4 C++ STL</h2><h3 id="_4-1-conceptual-framework" tabindex="-1"><a class="header-anchor" href="#_4-1-conceptual-framework" aria-hidden="true">#</a> 4.1 Conceptual Framework</h3><h3 id="_4-2-container" tabindex="-1"><a class="header-anchor" href="#_4-2-container" aria-hidden="true">#</a> 4.2 Container</h3><h3 id="_4-3-function-object" tabindex="-1"><a class="header-anchor" href="#_4-3-function-object" aria-hidden="true">#</a> 4.3 Function Object</h3><h3 id="_4-3-algorithm" tabindex="-1"><a class="header-anchor" href="#_4-3-algorithm" aria-hidden="true">#</a> 4.3 Algorithm</h3>',44),u=[s,o,c];function d(p,h){return t(),i("div",null,u)}const b=n(r,[["render",d],["__file","Cpp.html.vue"]]);export{b as default};
