import{_ as e,W as a,X as t,a2 as r}from"./framework-3800c176.js";const i={},n=r('<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C++</h1><h2 id="_1-basic-c" tabindex="-1"><a class="header-anchor" href="#_1-basic-c" aria-hidden="true">#</a> 1 Basic C++</h2><h3 id="_1-1-variable-type" tabindex="-1"><a class="header-anchor" href="#_1-1-variable-type" aria-hidden="true">#</a> 1.1 Variable &amp; Type</h3><h4 id="variable-constant" tabindex="-1"><a class="header-anchor" href="#variable-constant" aria-hidden="true">#</a> <em>Variable &amp; Constant:</em></h4><ul><li><p>Why / What variable: <strong>name a memory space</strong> to operate it conveniently</p></li><li><p>Why / What constant: name a memory space where there is <strong>unchangeable</strong> data</p></li><li><p>How variable:</p><ul><li>Declare: <code>type variable_name;</code></li><li>Define: <code>variable_name = variable_value;</code><ul><li>Declare and define: <code>type variable_name = variable_value;</code></li></ul></li><li>Global and local:</li></ul></li><li><p>How constant:</p><ul><li><p>Declare and define: <code>const type constant_name = constant_value;</code></p><blockquote><p>Add a <code>const</code> in front of statement defining a variable</p></blockquote></li></ul></li></ul><hr><h4 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> <em>Type:</em></h4><ul><li><p>Why type: store data with different properties and allocate <strong>memory space</strong> reasonably</p></li><li><p>What type:</p><ul><li><p>Integer type:</p><table><thead><tr><th>Type</th><th>Memory Usage</th></tr></thead><tbody><tr><td>short</td><td>2 bytes</td></tr><tr><td>int</td><td>4 bytes</td></tr><tr><td>long</td><td>4 bytes</td></tr><tr><td>long long</td><td>If 32-bit Linux, 4 bytes,<br>If 64-bit Linux, 8 bytes,<br>If Windows, 4 byte</td></tr></tbody></table></li><li><p>Floating-point type:</p></li></ul></li><li><p>How type</p><ul><li></li></ul></li></ul><hr><h4 id="macro" tabindex="-1"><a class="header-anchor" href="#macro" aria-hidden="true">#</a> <em>Macro:</em></h4><ul><li>Why macro:</li><li>How to use macro: <ul><li><code>#define macro_name macro_value</code></li></ul></li></ul><h3 id="_1-2-flow-of-control" tabindex="-1"><a class="header-anchor" href="#_1-2-flow-of-control" aria-hidden="true">#</a> 1.2 Flow of Control</h3><h3 id="_1-3-function" tabindex="-1"><a class="header-anchor" href="#_1-3-function" aria-hidden="true">#</a> 1.3 Function</h3><ul><li>advanced</li></ul><h3 id="_1-4-pointer" tabindex="-1"><a class="header-anchor" href="#_1-4-pointer" aria-hidden="true">#</a> 1.4 Pointer</h3><h3 id="_1-5-structure" tabindex="-1"><a class="header-anchor" href="#_1-5-structure" aria-hidden="true">#</a> 1.5 Structure</h3><h2 id="_2-object-oriented-c" tabindex="-1"><a class="header-anchor" href="#_2-object-oriented-c" aria-hidden="true">#</a> 2 Object-oriented C++</h2><h3 id="_2-1-memory-partition" tabindex="-1"><a class="header-anchor" href="#_2-1-memory-partition" aria-hidden="true">#</a> 2.1 Memory Partition</h3><h3 id="_2-2-reference" tabindex="-1"><a class="header-anchor" href="#_2-2-reference" aria-hidden="true">#</a> 2.2 Reference</h3><h3 id="_2-3-class-object" tabindex="-1"><a class="header-anchor" href="#_2-3-class-object" aria-hidden="true">#</a> 2.3 Class &amp; Object</h3><h3 id="_2-4-file" tabindex="-1"><a class="header-anchor" href="#_2-4-file" aria-hidden="true">#</a> 2.4 File</h3><h2 id="_3-template-c" tabindex="-1"><a class="header-anchor" href="#_3-template-c" aria-hidden="true">#</a> 3 Template C++</h2><h3 id="_3-1-conceptual-framework" tabindex="-1"><a class="header-anchor" href="#_3-1-conceptual-framework" aria-hidden="true">#</a> 3.1 Conceptual Framework</h3><h3 id="_3-2-function-template" tabindex="-1"><a class="header-anchor" href="#_3-2-function-template" aria-hidden="true">#</a> 3.2 Function Template</h3><h3 id="_3-3-class-template" tabindex="-1"><a class="header-anchor" href="#_3-3-class-template" aria-hidden="true">#</a> 3.3 Class Template</h3><h2 id="_4-c-stl" tabindex="-1"><a class="header-anchor" href="#_4-c-stl" aria-hidden="true">#</a> 4 C++ STL</h2><h3 id="_4-1-conceptual-framework" tabindex="-1"><a class="header-anchor" href="#_4-1-conceptual-framework" aria-hidden="true">#</a> 4.1 Conceptual Framework</h3><h3 id="_4-2-container" tabindex="-1"><a class="header-anchor" href="#_4-2-container" aria-hidden="true">#</a> 4.2 Container</h3><h3 id="_4-3-function-object" tabindex="-1"><a class="header-anchor" href="#_4-3-function-object" aria-hidden="true">#</a> 4.3 Function Object</h3><h3 id="_4-3-algorithm" tabindex="-1"><a class="header-anchor" href="#_4-3-algorithm" aria-hidden="true">#</a> 4.3 Algorithm</h3>',30),d=[n];function h(l,o){return a(),t("div",null,d)}const s=e(i,[["render",h],["__file","Cpp.html.vue"]]);export{s as default};
