import{_ as n,W as s,X as a,a1 as e}from"./framework-b5ea9e64.js";const o={},t=e(`<h1 id="linux-network-programming" tabindex="-1"><a class="header-anchor" href="#linux-network-programming" aria-hidden="true">#</a> Linux Network Programming</h1><h2 id="socket-programming" tabindex="-1"><a class="header-anchor" href="#socket-programming" aria-hidden="true">#</a> Socket Programming</h2><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h3><ul><li><p>IP + port</p></li><li><p>Linux implement: 1 file descriptor -&gt; 1 socket --contains--&gt; 2 buffers by core</p><ul><li>sending buffer</li><li>receiving buffer</li></ul></li><li><p>pair sockets in network communication</p><ul><li>sending &lt;-&gt; receiving</li><li>receiving &lt;-&gt; sending</li></ul></li><li><p><code>sockaddr</code>: <code>man 7 ip</code></p><ul><li><p><code>struct sockaddr_in addr;</code></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span>
    <span class="token class-name">sa_family_t</span> sin_family<span class="token punctuation">;</span> <span class="token comment">/* AF_INET, AF_INET6 */</span>
    <span class="token class-name">in_port_t</span> sin_port<span class="token punctuation">;</span> <span class="token comment">/* NBO port, htons*/</span>
    <span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span> <span class="token comment">/* internet address */</span>
<span class="token punctuation">}</span>
<span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> s_addr<span class="token punctuation">;</span> <span class="token comment">/* NBO address, inet_pton */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>INADDR_ANY</code>: Get any valid host IP address in system, binary little-endian</p></li><li><p>use:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token operator">/</span>AF_INET6<span class="token punctuation">;</span>
addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> dst<span class="token punctuation">;</span>
<span class="token function">inet_pton</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>
addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> dst<span class="token punctuation">;</span>
addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// key point</span>
<span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Why: uniform interface type but use more accurate implementation</p></li></ul></li></ul><h3 id="nbo-network-byte-order" tabindex="-1"><a class="header-anchor" href="#nbo-network-byte-order" aria-hidden="true">#</a> NBO(Network Byte Order)</h3><ul><li><p>Little-endian order: Physical storage within computer</p><blockquote><p>Microsoft, Intel</p></blockquote></li><li><p>Big-endian order: TCP/IP network</p><blockquote><p>IBM</p></blockquote></li><li><p>Transformation: little-endian &lt;-&gt; big-endian</p><ul><li>IP <ul><li><code>uint32_t htonl(uint32_t hostlong)</code></li><li><code>uint32_t ntohl(uint32_t netlong)</code></li><li><code>int inet_pton(int af, const char *src, void *dst)</code>: Dotted decimal IP (string) --<code>atoi</code>--&gt; <code>int </code> --<code>htol</code>--&gt; NBO IP <ul><li><code>af</code>: <code>AF_INET</code>, <code>AF_INET6</code></li><li><code>const char *src</code>: Dotted decimal IP</li><li><code>void *dst</code>: NBO IP, result argument</li><li>return <ul><li>success: <code>1</code></li><li><code>src</code> not valid exception: <code>0</code></li><li>error: <code>-1</code></li></ul></li></ul></li><li><code>const char *inet_ntop(int af, const void *src, char *dst, socklen_t size)</code><ul><li><code>af</code></li><li><code>const void *src</code>: NBO</li><li><code>char *dst</code>: result argument, the same as return value <ul><li>success: non-NULL</li><li>error: non</li></ul></li><li><code>socklen_t size</code>: size of <code>dst</code></li></ul></li></ul></li><li>Port <ul><li><code>uint16_t htons(uint16_t hostshort)</code></li><li><code>uint16_t ntohs(uint16_t netshort)</code></li></ul></li></ul><blockquote><p>h: host to n:network s:short l:long</p></blockquote></li></ul><h3 id="socket-communication" tabindex="-1"><a class="header-anchor" href="#socket-communication" aria-hidden="true">#</a> Socket Communication</h3><p>Server:</p><ol><li><code>socket()</code> fd</li><li><code>bind()</code> ip + port</li><li><code>listen()</code> set the limit of listening. maximum amount of constructing connection at the same time</li><li><code>accept()</code> listen connection from client and block until <ul><li>Return new socket for communication</li><li>The original socket will be released to listen another connection</li></ul></li><li><code>read()</code> and <code>write()</code> until 0</li><li><code>close</code></li></ol><p>Client:</p><ol><li><code>socket()</code> fd</li><li><code>connect()</code> ip + port</li><li><code>write()</code> and <code>read()</code></li></ol><p>The amount of sockets is 3</p>`,12),i=[t];function c(l,d){return s(),a("div",null,i)}const r=n(o,[["render",c],["__file","LinuxNetworkProgramming.html.vue"]]);export{r as default};
