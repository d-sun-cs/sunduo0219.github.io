import{_ as i,W as t,X as l,a2 as e}from"./framework-3800c176.js";const s={},r=e('<h1 id="distributed-system" tabindex="-1"><a class="header-anchor" href="#distributed-system" aria-hidden="true">#</a> Distributed System</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><div class="hint-container info"><p class="hint-container-title">Questions</p><ul><li>What’s distributed system?</li><li>Why to use distributed system?</li><li>How to implement distributed system?</li></ul></div><ul><li><u>What’s distributed system</u>: Coordinate <strong>computers</strong> through <strong>network</strong> to finish some consistent tasks</li><li><u>Why to use distributed system</u>: <ul><li>Parallelism / Performance</li><li>Fault tolerance</li><li>Physical distribution</li><li>Security / Isolated</li></ul></li><li><u>How to implement distributed system</u>: <ul><li>Challenges to solve: <ul><li>Concurrent programming / Consistency <ul><li>Strong consistency</li><li>Weak consistency</li></ul></li><li>Partial failure / Availability / Recoverability <ul><li>Non-volatile storage</li><li>Replicating</li></ul></li><li>Calculate performance / Scalability <ul><li>Architecture design</li></ul></li></ul></li><li>Infrastructure: <ul><li>Storage</li><li>Computation</li><li>Communication</li></ul></li><li>Implementation Tools: <ul><li>RPC</li><li>Threads &amp; Locks</li></ul></li></ul></li></ul>',4),a=[r];function o(n,u){return t(),l("div",null,a)}const d=i(s,[["render",o],["__file","DistributedSystem.html.vue"]]);export{d as default};
