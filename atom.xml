<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunDocker&#39;s Personal Blog</title>
  
  <subtitle>whoami</subtitle>
  <link href="https://sundocker.online/atom.xml" rel="self"/>
  
  <link href="https://sundocker.online/"/>
  <updated>2023-01-22T12:07:24.153Z</updated>
  <id>https://sundocker.online/</id>
  
  <author>
    <name>SunDocker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter</title>
    <link href="https://sundocker.online/posts/e5974716.html"/>
    <id>https://sundocker.online/posts/e5974716.html</id>
    <published>2023-01-21T11:58:40.000Z</published>
    <updated>2023-01-22T12:07:24.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Component">Component</h2><h2 id="Layout">Layout</h2><h2 id="Event-Lifecycle">Event &amp; Lifecycle</h2><h2 id="Route">Route</h2><h2 id="Getx">Getx</h2><h2 id="HTTP-Request">HTTP Request</h2><h2 id="Animation">Animation</h2><h2 id="Project-Management">Project Management</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Component&quot;&gt;Component&lt;/h2&gt;
&lt;h2 id=&quot;Layout&quot;&gt;Layout&lt;/h2&gt;
&lt;h2 id=&quot;Event-Lifecycle&quot;&gt;Event &amp;amp; Lifecycle&lt;/h2&gt;
&lt;h2 id=&quot;Route&quot;&gt;Route&lt;/h2&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Dart</title>
    <link href="https://sundocker.online/posts/36461f30.html"/>
    <id>https://sundocker.online/posts/36461f30.html</id>
    <published>2023-01-21T11:58:35.000Z</published>
    <updated>2023-01-22T12:07:24.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-Grammar">Basic Grammar</h2><h2 id="List-Set-Map">List &amp; Set &amp; Map</h2><h2 id="Function-Class">Function &amp; Class</h2><h2 id="Inheritance-Polymorphic-Interface-Genericity">Inheritance &amp; Polymorphic &amp; Interface &amp; Genericity</h2><h2 id="Library">Library</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Basic-Grammar&quot;&gt;Basic Grammar&lt;/h2&gt;
&lt;h2 id=&quot;List-Set-Map&quot;&gt;List &amp;amp; Set &amp;amp; Map&lt;/h2&gt;
&lt;h2 id=&quot;Function-Class&quot;&gt;Function &amp;amp; Class&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Install List</title>
    <link href="https://sundocker.online/posts/23135839.html"/>
    <id>https://sundocker.online/posts/23135839.html</id>
    <published>2023-01-17T07:56:36.000Z</published>
    <updated>2023-01-30T05:59:21.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-Microsoft">Windows &amp; Microsoft</h2><blockquote><p>All software here should be synced by Microsoft personal account</p></blockquote><h3 id="Edge">Edge</h3><h3 id="Visual-Studio-Code">Visual Studio Code</h3><h3 id="Mail">Mail</h3><h3 id="Microsoft-Store">Microsoft Store</h3><h3 id="Microsoft-To-Do">Microsoft To Do</h3><h3 id="Twinkle-Tray-Brightness-Slider">Twinkle Tray: Brightness Slider</h3><h3 id="Auto-Dark-Mode">Auto Dark Mode</h3><h2 id="Work-Efficiency">Work Efficiency</h2><h3 id="Typora">Typora</h3><h3 id="AutoHotKey-KeyMouse">AutoHotKey &amp; KeyMouse</h3><ul><li><p>AutoHotKey: <a href="https://www.autohotkey.com/">official website</a></p><ul><li>Start up with administrator authority: <a href="https://jingyan.baidu.com/article/a681b0de6a322c3b18434630.html">图解Win10 下以管理员身份设置开机自启程序-百度经验 (baidu.com)</a></li></ul></li><li><p>KeyMouse: <a href="https://github.com/iscooool/KeyMouse">github repo</a></p></li></ul><h3 id="Nircmd">Nircmd</h3><ul><li><a href="https://www.nirsoft.net/utils/nircmd.html">NirCmd - Windows command line tool (nirsoft.net)</a></li><li>Config environment variable for <code>nircmd.exe</code></li></ul><h3 id="ContextMenuManager">ContextMenuManager</h3><h3 id="Bandizip">Bandizip</h3><h3 id="Quicker">Quicker</h3><p><a href="https://getquicker.net/">Quicker软件 您的指尖工具箱 - Quicker (getquicker.net)</a></p><h2 id="Runtime-Development-Tools">Runtime &amp; Development Tools</h2><h3 id="Git">Git</h3><h3 id="Notepad">Notepad++</h3><h3 id="IDEA-Java">IDEA &amp; Java</h3><h3 id="MinGW">MinGW</h3><h3 id="Node">Node</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Windows-Microsoft&quot;&gt;Windows &amp;amp; Microsoft&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;All software here should be synced by Microsoft personal account&lt;/p&gt;</summary>
      
    
    
    
    <category term="Li" scheme="https://sundocker.online/categories/Li/"/>
    
    
  </entry>
  
  <entry>
    <title>SoftwareTips</title>
    <link href="https://sundocker.online/posts/fb9c7086.html"/>
    <id>https://sundocker.online/posts/fb9c7086.html</id>
    <published>2023-01-16T14:44:48.000Z</published>
    <updated>2023-01-18T09:47:05.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Edge">Edge</h2><h3 id="Read-Mode">Read Mode</h3><ol><li><code>Ctrl L</code> to edit the URL in the <strong>address bar</strong></li><li>Add <code>read:</code> in front of the URL</li><li><code>Enter</code> to read the webpage in read mode</li><li>Use the <strong>tool bar</strong> on the top of webpage</li></ol><h3 id="Vertical-Tabs">Vertical Tabs</h3><p><code>Ctrl Shift ,</code></p><p>or</p><ol><li>Click the button on the top right corner of browser</li><li>Click <code>Turn on verticl tabs</code></li></ol><h3 id="Collections">Collections</h3><p><code>Ctrl Shift y</code></p><p>Collect <strong>a group of webpages</strong></p><h3 id="AdGuard-AdBlocker">AdGuard AdBlocker</h3><p>An extension to <strong>remove ads</strong></p><h3 id="Tampermonkey-Greasy-Fork">Tampermonkey + Greasy Fork</h3><ul><li>Tampermonkey is an extension to manage <strong>webpage scripts</strong></li><li>Greasy Fork is a web where there are various webpage scripts</li></ul><h3 id="Global-Speed">Global Speed</h3><p>An extension to play videos times faster in webpage</p><h3 id="Listen-1">Listen 1</h3><p>An extension containing various music libraries in major music platforms like QQ music, Netease Cloud Music and so on</p><h2 id="Windows">Windows</h2><h3 id="Booting-Items">Booting Items</h3><ol><li><code>win X</code> <code>T</code></li><li>Find booting programs</li></ol><h3 id="Storage-Managing">Storage Managing</h3><ol><li><code>Win I</code></li><li>Search <code>storage</code></li></ol><h3 id="Windows-Key">Windows Key</h3><ul><li><p>Start Menu Programs:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&#123;UserName&#125;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Edge&quot;&gt;Edge&lt;/h2&gt;
&lt;h3 id=&quot;Read-Mode&quot;&gt;Read Mode&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Ctrl L&lt;/code&gt; to edit the URL in the &lt;strong&gt;address bar&lt;/strong&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>XV6LabSummary</title>
    <link href="https://sundocker.online/posts/8ecd89a3.html"/>
    <id>https://sundocker.online/posts/8ecd89a3.html</id>
    <published>2023-01-05T03:24:08.000Z</published>
    <updated>2023-01-25T02:45:56.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Lab-4-traps">Lab 4: traps</h2><h3 id="Basic-Theory">Basic Theory</h3><ul><li><p>Why to trap: Conversion between user mode and kernel mode</p><ul><li><p>What can supervisor actually do:</p><ul><li>Read or write <strong>control registers</strong></li><li>Use PTEs with 0 in <code>PTE_U</code></li></ul><blockquote><p>Still limited in <strong>virtual address</strong> set by page table</p></blockquote></li></ul></li><li><p>When to trap or What leads to trap:</p><ul><li>Syscall</li><li>Fault or Abort</li><li>Device</li></ul><blockquote><p>We also call Syscall and Fault as <strong><em>Software Interrupt</em>, Internal Interrupt or Exception</strong></p></blockquote></li><li><p>Key point of traps: <strong>Isolation &amp; Security</strong></p></li><li><p>Some relevant hardware registers / <strong>Control registers</strong>:</p><ul><li>pc: program counter</li><li>mode: mark supervisor mode or user mode</li><li>satp: supervisor <strong>address translation</strong> and protection, points to physical memory of page table</li><li>stvec: supervisor <strong>trap vector</strong> base address, points to base memory of instructions handling traps</li><li>sepc: supervisor exception program counter, <strong>keep value of pc</strong> when handling traps</li><li>sscratch: supervisor scratch, keep virtual address of <strong>trapframe page</strong> to exchange with a0</li><li>scause: supervisor cause, keep the trap <strong>reason</strong></li></ul></li><li><p>How to trap / Procedure of trap (take syscall as an example):</p><ol><li><p>Syscall function jump to <strong>usys.S</strong> and execute two instructions:</p><ol><li>Store <strong>syscall number</strong> into a7</li><li>Call <strong><code>ecall</code> instruction</strong></li></ol></li><li><p><code>ecall</code> do three things by <strong>hardware</strong>:</p><ol start="0"><li><p>Disable interrupts</p></li><li><p>Mark the <strong>mode</strong> to supervisor mode</p></li><li><p>Keep <strong>pc</strong> in sepc</p></li><li><p>Set pc to <strong>stvec</strong> and jump to <code>uservec</code> in trampoline.S</p></li></ol><blockquote><p><code>ecall</code> do only these things for <strong>more flexibility to software</strong></p></blockquote></li><li><p>Kernel executes <code>uservec</code> in trampoline.S</p><ol><li><p>Exchange a0 and sscratch</p><blockquote><p>So now a0 keeps trapframe page, sscratch keeps a0’s old value</p></blockquote></li><li><p>Keep <strong>32 user’s register</strong> in trapframe</p></li><li><p>Set stack pointer to <strong>kernel stack</strong> (getting from trapframe)</p></li><li><p>Set t0 to <strong>pointer of <code>usertrap()</code></strong> (getting from trapframe)</p></li><li><p>Set t1 to <strong>kernel page table</strong> and exchange satp and t1 (getting from trapframe)</p><blockquote><p>Now program keeps normal for <strong>trampoline page having same map</strong> in both user page table and kernel page table</p></blockquote></li><li><p><code>uservec</code> jumps to <code>usertrap()</code> in trap.c</p></li></ol></li><li><p><code>usertrap()</code> handles this trap</p><ol><li><p>Set <strong>stvec</strong> to <code>kernelvec</code></p><blockquote><p>Traps can be triggered in kernel space, different from user space</p></blockquote></li><li><p>Keep <strong>sepc</strong> in trapframe</p><blockquote><p>May it change to another process and also trigger traps to overwrite sepc</p></blockquote></li><li><p>Check <strong>cause</strong> for this trap and handle it (If syscall, enable interrupts)</p></li><li><p>Call <code>usertrapret()</code></p></li></ol></li><li><p><code>usertrapret()</code> finish some works to return to user space</p><ol><li>Disable interrupts</li><li>Set <strong>stvec</strong> to <code>uservec </code>in trampoline.S</li><li>Store <strong>kernel page table</strong> into trapframe</li><li>Store <strong>kernel stack pointer</strong> into trapframe</li><li>Store <code>usertrap</code> into trapframe</li><li>Modify <strong>sstatus</strong> to ensure returning to user mode and interrupt on</li><li>Set <strong>sepc</strong> to previous kept pc</li><li>Jump to <code>userret</code> in trampoline.S</li></ol></li><li><p>Kernel executes <code>uservec</code> in trampoline.S</p><ol><li><p>Set satp to <strong>user page table</strong> (getting from <code>usertrapret()</code>)</p></li><li><p>Restore 32 user’s resgisters</p></li><li><p>Exchange a0 and sscratch</p><blockquote><p>So now sscratch keeps trapframe page, a0 keeps syscall return value</p></blockquote></li><li><p><code>sret</code></p></li></ol></li><li><p><code>sret</code></p><ol><li>Mark the <strong>mode</strong> to user mode</li><li>Set <strong>pc</strong> to sepc</li><li>Enable interrupts</li></ol></li><li><p>Return to user space</p></li></ol></li></ul><h3 id="Task-Analysis">Task Analysis</h3><h4 id="Task-1-RISC-V-assembly">Task 1: RISC-V assembly</h4><ul><li><code>jalr</code> omit first parameter for it is the same as register in second parameter</li></ul><h4 id="Task-2-Backtrace">Task 2: Backtrace</h4><ul><li>Comprehend function call stack’s structure, especially <code>fp</code> and <code>pre fp</code>, to correctly <strong>back track</strong> function call stack</li><li>Through <strong><code>fp</code> and PAGE-align</strong> to find the top of function call stack, for XV6 allocates <strong>one page for each stack</strong></li></ul><h4 id="Task-3-Alarm">Task 3: Alarm</h4><ul><li><p>Where to call <code>fn</code>: where it handles <strong>timer interrupt</strong></p></li><li><p>When to call <code>fn</code>:</p><ul><li><strong>n ticks</strong>, so we need a new filed in process structrue<ul><li>Prevent <strong>re-entrant</strong> calls to the handler by adding a new field in process structure to sign if a handler is running</li></ul></li></ul></li><li><p>How to call <code>fn</code>:</p><ul><li><p>A new field in process structure to store <code>fn</code> address</p><blockquote><p>But in kernel mode, we can’t directly use <strong>user space address</strong> to call <code>fn</code></p></blockquote></li><li><p>Modify user process <strong>execution stream</strong> to run <code>fn</code> by:</p><ul><li>Modifying <code>sepc</code> in <strong>trap handling</strong></li><li><strong>Store</strong> user process previous <strong>context</strong> in <code>trapframe</code></li><li><strong>Restore</strong> user process previous context in <code>sigreturn</code></li></ul></li></ul></li></ul><h2 id="Lab-5-xv6-lazy-page-allocation">Lab 5: xv6 lazy page allocation</h2><h3 id="Basic-Theory-2">Basic Theory</h3><ul><li><p><strong>Information required</strong> to properly handle <strong>page faults</strong>:</p><ul><li>The error <strong>virtual address</strong> in <strong>stval</strong></li><li>The error <strong>reason</strong> in <strong>scause</strong></li><li>The instruction address triggering page fault in <strong>sepc or <code>trapframe-&gt;eps</code></strong></li></ul></li><li><p><strong>Thoughts</strong> about <strong>lazy page allocation</strong>:</p><ul><li><p><strong>Just modify the value <code>p-&gt;sz</code></strong> but do not allocate pages in <strong><code>sbrk()</code> syscall</strong></p><blockquote><p><code>sbrk()</code> <strong>expands heap</strong> to get new memory for process</p></blockquote></li><li><p>Lazily allocate pages when <strong>page faults with virtual address between</strong> <code>p-&gt;sz</code> before and after <code>sbrk()</code> occurs, and execute page fault instructions again</p><blockquote><p>To execute page fault again, we just keep the value in <strong>sepc</strong>, because it keeps <strong>the instruction address cause page fault</strong>. (For syscall, value in sepc will be <strong>increased</strong> to execute next instruction instead of <code>ecall</code> after syscal)</p></blockquote></li></ul></li><li><p>Simple <strong>implementation</strong> of <strong>lazy page allocation</strong>:</p><ul><li><p><em><strong>Lazy</strong></em>: Modify <code>sbrk()</code> by plan</p></li><li><p><em><strong>Allocate</strong></em>: Handle a more trap case <strong>page fault</strong> in <code>usertrap()</code>, to <code>kalloc()</code> a <strong>new page</strong> and <code>mappages()</code> a <strong>new map</strong> in lazy allocation</p></li><li><p><em><strong>Release</strong></em>: Delete <code>panic()</code>  in <code>uvmunmap()</code> when <strong>unmapping lazy allocation page</strong> not actually used</p><blockquote><p>XV6 <code>panic()</code> when this case happens, but actually this case <strong>never happens</strong> in unmodified XV6, and we require no <code>panic()</code> on this case in lazy allocation</p></blockquote></li></ul></li></ul><h3 id="Task-Analysis-2">Task Analysis</h3><blockquote><p>Just follow thought and implementation in basic theory</p></blockquote><h4 id="Task-1-Eliminate-allocation-from-sbrk">Task 1: Eliminate allocation from sbrk()</h4><ol><li><em><strong>Lazy</strong></em></li></ol><h4 id="Task-2-Lazy-allocation">Task 2: Lazy allocation</h4><ol start="2"><li><em><strong>Allocate</strong></em></li></ol><h4 id="Task-3-Lazytests-and-Usertests">Task 3: Lazytests and Usertests</h4><blockquote><p>Just follow key points listed in guide book</p></blockquote><ol start="3"><li><em><strong>Release</strong></em></li><li><em><strong>Kernel</strong></em>: When user process use lazy allocated virtual address, page fault causes trap. But when <strong>syscall use user space’s lazy allocated virtual address</strong> (already in trap but not caused by page fault) , we need to handle it in <code>argaddr()</code> or <code>walkaddr()</code></li></ol><h2 id="Lab-6-Copy-on-Write-Fork-for-xv6">Lab 6: Copy-on-Write Fork for xv6</h2><h3 id="Basic-Theory-3">Basic Theory</h3><ul><li><p><strong>Thoughts</strong> about <strong>COW fork</strong>:</p><ul><li><p><em><strong>Lazy:</strong></em> <strong>Just copy page table maps</strong> of parent process but do not copy pages when creating child process, and set these maps <strong>read-only</strong></p></li><li><p><em><strong>Allocate:</strong></em> Lazily copy pages when parent or child process <strong>write these pages causing page faults</strong>, and execute page fault instructions again</p><blockquote><p>For recognizing this case, we need use <strong>a new sign bit in PTE</strong>, or we may not distinguish this case from writing <strong>an originally read-only page</strong></p></blockquote></li><li><p><em><strong>Release:</strong></em> Be careful to decide whether to <strong>release a page</strong> when parent process exits, for child process maybe using it</p><blockquote><p>We can set <strong>a reference counter</strong> for these pages</p></blockquote></li></ul></li></ul><h3 id="Task-Analysis-3">Task Analysis</h3><h4 id="Task-1-Implement-copy-on-write">Task 1: Implement copy-on write</h4><blockquote><p>Just follow thought in basic theory with the help of hints in guide book</p></blockquote><ol><li><em><strong>Lazy</strong></em></li><li><em><strong>Allocate</strong></em></li><li><em><strong>Release</strong></em></li><li><em><strong>Kernel</strong></em>: When user process <em>write</em> lazy allocated virtual address, page fault causes trap. But when <strong>kernel process <em><u>write</u></em> user space’s lazy allocated virtual address</strong> (already in trap but not caused by page fault) , we need to handle it in <code>copyout()</code></li></ol><h2 id="Lab-7-Multithreading">Lab 7: Multithreading</h2><h3 id="Basic-Theory-4">Basic Theory</h3><h4 id="Interrupt">Interrupt</h4><blockquote><p>Here we mainly talk about <strong>the narrow interrupt</strong>, not software interrupt</p></blockquote><ul><li><p>Differences between <strong>interrupt</strong> and other trap causes (software interrupt):</p><ul><li><em><strong>Asynchronous</strong></em>: <strong>Interrupt handler</strong> has no relationship with current CPU running process</li><li><em><strong>Concurrency</strong></em>: <strong>Devices generating interrupt</strong> <em>concurrently run</em> with CPU</li><li><em><strong>Program device</strong></em>: Devices like network card also require programming</li></ul></li><li><p><strong>Related registers</strong> about interrupt:</p><ul><li>SIE: Supervisor Interrupt Enable, has one bit for <strong>device interrupt</strong>, one bit for <strong>software interrupt</strong> and one bit for <strong>timer interrupt</strong></li><li>SSTATUS: Supervisor STATUS, has one bit to <strong>open or close interrupt</strong></li><li>SIP: Supervisor Interrupt Pending, keep <strong>the type of interrupt</strong></li></ul></li><li><p>Basic setting of interrupt (in <code>main()</code>):</p><ol><li>Program devices</li><li>Program PLIC (<code>plicinit()</code>)</li><li>Every CPU core call <code>plicinithart()</code> to show interest to device interrupts</li><li><code>scheduler()</code> to <code>intr_on()</code> opening interrupt and run process</li></ol></li><li><p>Hardware about interrupt:</p><ul><li>PLIC <strong>route interrupts</strong> from devices to <strong>CPU claiming</strong> to receive interrupt</li><li>CPU handle interrupt with trap mechanism</li><li>CPU will <strong>notice PLIC</strong> after handling interrupt</li></ul><blockquote><p>Kernel need to <strong>program PLIC</strong> to tell it how to route interrupts</p></blockquote></li><li><p>Software about interrupt / <strong>Driver</strong>:</p><ul><li>Bottom part: <strong>interrupt handler</strong></li><li>Top part: <strong>interfaces</strong> for user or kernel process</li></ul></li></ul><h4 id="Multithreading-Timer-Interrupt">Multithreading &amp; Timer Interrupt</h4><ul><li><p>Three parts of thread’s status to keep when switching</p><ul><li><strong>Program counter</strong></li><li><strong>Registers</strong> storing variables</li><li>Program <strong>stack</strong></li></ul></li><li><p>XV6’s multithread mechanism</p><ul><li><strong>One kernel thread</strong> per user process, which <strong>handling traps</strong> for user process</li><li><strong>Only one user thread</strong> per user process, which <strong>controlling instructions</strong> of user process</li></ul><blockquote><p>So we may conclude that in XV6, one user process has two threads, but they never run together</p></blockquote></li><li><p>Implementation of multithread switch / Timer interrupt:</p><ol><li><p><strong>Hardware</strong> produce interrupt periodically, convert user space into <em><strong><u>kernel</u>’s</strong></em> timer interrupt handler</p><blockquote><p>With <strong>trap</strong> mechanism</p></blockquote></li><li><p>Timer interrupt handler <strong>yields</strong> CPU to <strong>thread scheduler</strong></p><ol><li><p>Call <code>yield()</code> to acquire process’s <strong>lock</strong>, change process’s <strong>state</strong> to <code>RUNNABLE</code> and call <code>sched()</code></p></li><li><p><code>sched()</code> do some checks and call <code>swtch</code></p></li><li><p><code>swtch</code>:</p><ol><li><p>Store kernel process’s <strong>registers</strong> into a <code>context</code></p><blockquote><p><code>context</code> is stored in corresponding <strong>user process structure</strong>;</p></blockquote></li><li><p>Convert to this <strong>CPU’s scheduler process</strong> by restoring its <code>context</code> thus jumping to <code>swtch()</code> called before</p><blockquote><p>Every CPU has a <strong>scheduler process</strong> also in <strong>kernel</strong>;</p><p>Scheduler process’s <code>context</code> is stored in its <strong>CPU structure</strong></p></blockquote></li><li><p>Continue executing <code>scheduler()</code></p></li></ol><blockquote><p><code>swtch</code> needs to save/restore only the <strong>callee-save registers</strong> because it is called as a <strong>C function</strong> thus <strong>caller-save registers</strong> saved automatically</p></blockquote></li><li><p><code>scheduler()</code> switch another <code>RUNNABLE</code> process to <code>RUNNING</code></p><ol><li>Release process’s <strong>lock</strong></li><li>Find another <code>RUNNABLE</code> process</li><li>Call <code>swtch</code></li></ol></li><li><p><code>swtch</code></p><ol><li>Store this <strong>CPU’s scheduler process</strong> <code>context</code></li><li><strong>Restore</strong> another kernel process’s <code>context</code> thus jumping to <code>swtch()</code> called before</li><li>Another kernel finish <strong>timer interrupt</strong> and return to <strong>user space</strong></li></ol></li></ol></li></ol><blockquote><p>Other interrupts causing <strong>thread waiting</strong> are similar to timer interrupt</p></blockquote></li></ul><h3 id="Task-Analysis-4">Task Analysis</h3><h4 id="Task-1-Uthread-switching-between-threads">Task 1: Uthread: switching between threads</h4><ul><li><p>Complete <strong>thread structure</strong>: add <code>context</code></p></li><li><p>Complete <code>thread_create()</code>:</p><ul><li>Set <code>context.ra</code> to execute the function passed</li><li>Set <code>contest.sp</code> to execute on its own stack</li></ul><p>when <code>thread_schedule()</code> runs a given thread for the first time</p></li><li><p>Complete <code>thread_schedule()</code>: add calling <code>thread_swtich</code></p></li><li><p>Complete <code>thread_switch</code>: simulate <code>swtch</code></p></li></ul><h4 id="Task-2-Using-threads">Task 2: Using threads</h4><ul><li>Definition and Initialization of lock</li><li>Use of lock</li></ul><h4 id="Task-3-Barrier">Task 3: Barrier</h4><ul><li>Definition and Initialization of lock</li><li>Use of lock</li></ul><h2 id="Lab-8-locks">Lab 8: locks</h2><h3 id="Basic-Theory-5">Basic Theory</h3><h3 id="Task-Analysis-5">Task Analysis</h3><h4 id="Task1-Memory-allocator">Task1: Memory allocator</h4><h4 id="Task2-Buffer-cache">Task2: Buffer cache</h4><h2 id="Lab-9-file-system">Lab 9: file system</h2><h3 id="Basic-Theory-6">Basic Theory</h3><blockquote><p>The file system we talk about below is in XV6’s pattern</p></blockquote><h4 id="1-Disk-Level">1 Disk Level</h4><p><em>Disk layout:</em></p><ul><li>Block0: <strong>boot</strong> block, launch operation system</li><li>Block1: super <strong>block</strong>, describe file system</li><li>Block2 - Block46: <strong>metadata</strong> block<ul><li>Block2 - Block31: <strong>log</strong></li><li>Block32 - Block45: <strong>inode</strong></li><li>Block46: <strong>bitmap</strong> block</li></ul></li><li>Block47 - Block n (954 in total): <strong>data</strong> block</li></ul><h4 id="2-Buffer-Cache-Level">2 Buffer Cache Level</h4><blockquote><p>We use <em><u>buffer cache</u></em> to represent all the cache, use <em><u>block cache</u></em> to represent a certain block in buffer cache</p></blockquote><p><em>Allocate an inode / <code>ialloc()</code>:</em></p><ul><li><p>Visit all inode blocks by <code>bread()</code>, check if it is free then use it, and <code>brelse()</code></p></li><li><p><code>bread()</code>:</p><ol><li><p>Call <code>bget()</code> to get this block’s cache / <code>bget()</code>:</p><ol><li><p><code>acquire()</code> **buffer cache’**s <code>spinlock</code></p></li><li><p>Visit <strong>all block caches</strong> to find if this block is already cached, if yes:</p><ol><li><p>Increase this block cache’s <code>refcnt</code></p></li><li><p><code>release()</code> **buffer cache’**s <code>spinlock</code></p></li><li><p><code>acquiresleep()</code> <strong>block cache</strong>’s <code>sleeplock</code></p><blockquote><p>Anytime only one process can use a block cache, and it may cause much time to handle it. So there must be a <code>sleeplock</code></p></blockquote></li></ol></li><li><p>If not cached, recycle the <strong>LRU free block cache</strong> (<code>panic()</code> if no free block cache)</p><ol><li>If <code>refcnt</code> equals zero, then it is free. Set some fields of this block cache</li><li><code>release()</code> **buffer cache’**s <code>spinlock</code></li><li><code>acquiresleep()</code> <strong>block cache</strong>’s <code>sleeplock</code></li></ol></li></ol><blockquote><p>One disk block can only have one block cache, or error may occur. So there must be a <code>spinlock</code> to protect buffer cache</p></blockquote></li><li><p>Read from <strong>disk</strong> if it is <strong>not valid</strong></p></li><li><p>Return the block cache</p></li></ol></li><li><p><code>brelse()</code>:</p><ol><li><code>releasesleep()</code> block cache’s <code>sleeplock</code></li><li><code>acquire()</code> buffer cache’s <code>spinlock</code></li><li>Decrease this block cache’s <code>refcnt</code></li><li>If no process is waiting for this block cache (<code>refcnt==0</code>), then follow <strong>LRU</strong> to locate this block cache in buffer</li><li><code>release()</code> buffer cache’s <code>spinlock</code></li></ol></li></ul><h4 id="3-Logging-Level">3 Logging Level</h4><p><em><strong>Crash</strong> includes:</em></p><ul><li>Power fault</li><li>Core <code>panic()</code></li></ul><blockquote><p>Exclude disk fault like data missing</p></blockquote><hr><p><em><strong>Key</strong> point:</em></p><ul><li>The <strong>atomicity</strong> of multiple operation of <strong>writing block</strong>, not the <strong>order</strong></li><li><strong>Fast recovery</strong></li></ul><hr><p><em><strong>Thoughts</strong> about logging:</em></p><ol><li><p><em>Write log</em>: <strong>write data to log</strong> when requiring to write file system</p></li><li><p><em>Commit op</em>: <strong>Record numbers</strong> representing a groups of file system <strong>writing</strong> when they totally finish and <strong>store data in log</strong></p><blockquote><p>Follow “<strong>write ahead rule</strong>”: before committing, all the written data must be in the log</p></blockquote></li><li><p><em>Install log</em>: <strong>Move</strong> log’s blocks’ data to file system’s blocks when really ready to execute these writing</p></li><li><p><em>Clean log</em>: <strong>Clean records</strong> after installing log</p></li></ol><hr><p><em><strong>A Log’s Structure</strong></em>:</p><ul><li><strong>Header block</strong>: valid <strong>log block amount</strong> and <strong>disk block number</strong> each log block corresponding</li><li><strong>Log’s data block</strong>: actual blocks’ data to store in disk</li></ul><hr><p><em><strong>Implementation of Logging:</strong></em></p><ul><li><p><code>begin_op()</code></p><ol><li><code>acquire()</code> log’s lock</li><li>If log is <strong>committing</strong>, sleep</li><li>If <strong>concurrent operation amount</strong> (<code>outstanding</code>) is over upper limit, sleep</li><li>If not the above two cases, increase <code>outstanding</code>, <code>release()</code> lock and continue</li></ol></li><li><p><code>log_write()</code>: update <strong>log header in memory</strong> including block number and block amount</p></li><li><p><code>end_op()</code></p><ol><li><p><code>acquire()</code> log’s lock</p></li><li><p>Decrease <code>outstanding</code></p></li><li><p>If this is the last outstanding operation (<code>outsanding == 0</code>), mark it, else <code>wakeup()</code> sleeping process in <code>begin_op()</code></p></li><li><p><code>release()</code> log’s lock</p></li><li><p><code>commit()</code> if marked above</p><ol><li><p><code>write_log()</code>(write log): <strong>write</strong> block’s data from <strong>buffer cache</strong> to disk <strong>log</strong> according to log header in memory</p><blockquote><p><code>bwrite()</code> will be used in <code>write_log()</code>, but should not be directly used without logging</p></blockquote></li><li><p><code>write_head()</code>(commit op): write <strong>log header</strong> into disk log’s header block</p><blockquote><p>Inside <code>write_head()</code> is a <code>bwrite()</code> call which is the actual “<strong>commit point</strong>”</p></blockquote></li><li><p><code>install_trans()</code>(install)</p></li><li><p>Set log header <code>n</code>(amount) to 0 and <code>write_head()</code>(clean log)</p></li></ol></li></ol></li></ul><hr><p><em>File System <strong>Recovering</strong>:</em></p><blockquote><p><code>initlog() -&gt; recover_from_log()</code></p></blockquote><ol><li><code>read_head()</code> to read <strong>log header</strong> from disk into memory</li><li><code>install_trans()</code></li></ol><h4 id="4-Inode-Level">4 Inode Level</h4><p><em>Inode Structure’s Fields:</em></p><ul><li><code>type</code>: file or directory, or this inode is free</li><li><code>nlink</code>: count how many file names link to this inode</li><li><code>size</code>: file or directory data bytes</li><li>12 Direct block numbers: direct index to data block</li><li>1 Indirect block number: one level indirect indiex to data block</li></ul><hr><p><em>Find nth byte in a file:</em></p><ol><li><code>n / block_size</code> leads to the <strong>block number</strong></li><li><code>n % block_size</code> leads to the <strong>byte offset</strong> in a block</li></ol><h4 id="5-Directory-Level">5 Directory Level</h4><blockquote><p>Directory index block also follows index structrue above</p></blockquote><p><em>Directory Data Block Structure / <strong>Directory entries</strong>:</em></p><ul><li>16 bytes per entry<ul><li>First 2 bytes: subdirectory’s or file’s <strong>inode number</strong></li><li>Next 14 bytes: subdirectory’s or file’s <strong>name</strong></li></ul></li></ul><hr><p><em>Find a pathname:</em></p><ol><li>Begin with <strong><code>root </code> inode</strong> having index number 1 in XV6</li><li>Scan <strong><code>root</code>’s data blocks</strong> find the first level pathname’s corresponding <strong>index number</strong></li><li>Follow <strong>index number</strong> to find deeper level pathname in the data blocks</li><li>Repeat above steps until find the correct file or meet error</li></ol><hr><p><em>Create a file and firstly write data into it:</em></p><ol><li><strong>Allocate an inode</strong> and write <code>type</code>, <code>nlink</code> and other infomation in it</li><li>Find parent directory and <strong>create a new entry</strong> in its data block</li><li>Modify <strong>parent directory’s inode</strong>: <em>size</em> and so on</li><li>Scan <code>bitmap</code> to find an unused <strong>data block</strong> for new file to write and update <code>bitmap</code></li><li>Modify <strong>new file’s inode</strong>: <em>size</em>, <em>direct block number</em> and so on</li></ol><h4 id="6-Pathname-Level">6 Pathname Level</h4><h4 id="7-File-Descriptor-Level">7 File Descriptor Level</h4><h3 id="Task-Analysis-6">Task Analysis</h3><h4 id="Task1-Large-files">Task1: Large files</h4><ul><li>Modify the <strong>index address layout</strong> and inode structure in fs.h and file.h</li><li>Modify the <strong>index address map method</strong> in <code>bmap()</code><ul><li>Simulate singly-indirect block map in <code>bmap()</code></li><li><code>bread()</code> and <code>brelse()</code> an index block</li><li>Call <code>balloc()</code> if index or data block is not allocated</li><li>Call <code>log_write()</code> if index block is modified</li><li>Comprehend the arithmetical operation of <code>bn</code></li></ul></li><li>Modify the <strong>data and index block releasing method</strong> in <code>itrunc()</code><ul><li>Simulate singly-indirect block free in <code>itrunc()</code></li></ul></li></ul><h4 id="Task2-Symbolic-links">Task2: Symbolic links</h4><ul><li><strong>Create</strong> symbolic link in <code>sys_symlink()</code><ul><li><code>create()</code> with type <code>T_SYMLINK</code> and name <code>path</code></li><li><code>writei()</code> <code>target</code> to inode’s data block</li></ul></li><li><strong>Use</strong> symbolic link in <code>sys_open()</code><ul><li>Add codes <strong>after getting inode</strong></li><li>Follow the symbolic link to update inode, if the type is <code>T_SYMLINK</code> and <code>O_NOFOLLOW</code> is not flagged</li></ul></li></ul><h2 id="Lab10-mmap">Lab10: mmap</h2><h3 id="Basic-Theory-7">Basic Theory</h3><ul><li>Goals of memory mapped files: handle files with <strong>memory related instructions</strong> like <code>load</code> and <code>store</code></li><li>Thoughts about <strong>eager mmap</strong>:<ul><li>Copy the whole file to memory by <strong>offset and length</strong>, allocating pages</li><li><strong>Unmap and write back dirty block</strong> after finishing handling the file</li></ul></li><li>Thoughts about <strong>lazy mmap</strong>:<ul><li><em><strong>Lazy:</strong></em> Just <strong>store VMA</strong> (Virtual Memory Area) which contains information about file in process structure but do not allocate pages</li><li><em><strong>Allocate:</strong></em> Lazily allocate pages when actually reading or writing mmap file causing <strong>page fault</strong></li></ul></li></ul><h3 id="Task-Analysis-7">Task Analysis</h3><h4 id="Task1-mmap">Task1: mmap</h4><blockquote><p>Just follow thought in basic theory with the help of hints in guide book</p></blockquote><ol><li><em><strong>Lazy</strong></em> (in <code>sys_mmap()</code>)</li><li><em><strong>Allocate</strong></em>: Besides basic theory above: (in <code>mmap_alloc()</code>)<ul><li>It is also required to handle <strong>permissions</strong> about file</li><li>Use <strong>inode</strong> to read file (<code>readi()</code>)</li></ul></li><li><em><strong>Release</strong></em>: (in <code>sys_munmap()</code>)<ul><li>Call <code>filewrite()</code> if <code>MAP_SHADED</code></li><li>Call <code>uvmunmap()</code> to unmap the file’s part in memory</li><li>Call <code>fileclose()</code> if unmap all the file in memory</li><li>Also delete unnecessary <code>panic()</code> in <code>uvmcopy()</code> and <code>uvmunmap()</code></li></ul></li><li><em><strong>Kernel</strong></em>:<ul><li><code>exit()</code></li><li><code>fork() </code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Lab-4-traps&quot;&gt;Lab 4: traps&lt;/h2&gt;
&lt;h3 id=&quot;Basic-Theory&quot;&gt;Basic Theory&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why to trap: Conversion between user mode and ke</summary>
      
    
    
    
    <category term="Computer Theory" scheme="https://sundocker.online/categories/Computer-Theory/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Operation System" scheme="https://sundocker.online/tags/Operation-System/"/>
    
    <category term="XV6" scheme="https://sundocker.online/tags/XV6/"/>
    
    <category term="MIT" scheme="https://sundocker.online/tags/MIT/"/>
    
    <category term="Lab" scheme="https://sundocker.online/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>Life Sharing Tree</title>
    <link href="https://sundocker.online/posts/d33aa198.html"/>
    <id>https://sundocker.online/posts/d33aa198.html</id>
    <published>2023-01-04T04:35:33.000Z</published>
    <updated>2023-01-04T06:42:20.480Z</updated>
    
    
    
    
    <category term="Life Sharing" scheme="https://sundocker.online/categories/Life-Sharing/"/>
    
    
    <category term="Life Sharing" scheme="https://sundocker.online/tags/Life-Sharing/"/>
    
  </entry>
  
  <entry>
    <title>Quickly Learn About This Blog</title>
    <link href="https://sundocker.online/posts/ed318fdc.html"/>
    <id>https://sundocker.online/posts/ed318fdc.html</id>
    <published>2023-01-04T04:30:21.000Z</published>
    <updated>2023-01-04T07:38:52.042Z</updated>
    
    
    <summary type="html">Come to see what exactly the blog contains and what can you get</summary>
    
    
    
    <category term="Life Sharing" scheme="https://sundocker.online/categories/Life-Sharing/"/>
    
    
    <category term="Life Sharing" scheme="https://sundocker.online/tags/Life-Sharing/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning</title>
    <link href="https://sundocker.online/posts/cc8189c7.html"/>
    <id>https://sundocker.online/posts/cc8189c7.html</id>
    <published>2023-01-02T09:45:03.000Z</published>
    <updated>2023-01-02T09:45:26.392Z</updated>
    
    
    
    
    <category term="AI" scheme="https://sundocker.online/categories/AI/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Machine Learning" scheme="https://sundocker.online/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Data Analysis</title>
    <link href="https://sundocker.online/posts/f137c912.html"/>
    <id>https://sundocker.online/posts/f137c912.html</id>
    <published>2023-01-02T09:44:56.000Z</published>
    <updated>2023-01-02T09:45:38.508Z</updated>
    
    
    
    
    <category term="AI" scheme="https://sundocker.online/categories/AI/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Data Analysis" scheme="https://sundocker.online/tags/Data-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="https://sundocker.online/posts/18596a3e.html"/>
    <id>https://sundocker.online/posts/18596a3e.html</id>
    <published>2023-01-02T09:41:51.000Z</published>
    <updated>2023-01-22T13:42:57.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><h3 id="Conceptual-Framework">Conceptual Framework</h3><h3 id="Install-Simple-Use">Install &amp; Simple Use</h3><ul><li>Project structure</li></ul><h2 id="Command-Lifecycle">Command &amp; Lifecycle</h2><ul><li>groovy</li><li>Hook</li></ul><h2 id="Task">Task</h2><h2 id="Dependency-Plugin">Dependency &amp; Plugin</h2><ul><li>build.gradle</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&quot;Conceptual-Framework&quot;&gt;Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;Install-Simple-Use&quot;&gt;Install &amp;amp; Simple Use</summary>
      
    
    
    
    <category term="Project Management" scheme="https://sundocker.online/categories/Project-Management/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Gradle" scheme="https://sundocker.online/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://sundocker.online/posts/7273cdc.html"/>
    <id>https://sundocker.online/posts/7273cdc.html</id>
    <published>2023-01-02T09:41:47.000Z</published>
    <updated>2023-01-22T13:43:13.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><h3 id="Conceptual-Framework">Conceptual Framework</h3><h3 id="Install-Simple-Use">Install &amp; Simple Use</h3><h2 id="Repository-Coordinate">Repository &amp; Coordinate</h2><h2 id="Command-Lifecycle">Command &amp; Lifecycle</h2><h2 id="Dependency-Module">Dependency &amp; Module</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&quot;Conceptual-Framework&quot;&gt;Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;Install-Simple-Use&quot;&gt;Install &amp;amp; Simple Use</summary>
      
    
    
    
    <category term="Project Management" scheme="https://sundocker.online/categories/Project-Management/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Maven" scheme="https://sundocker.online/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://sundocker.online/posts/69c3279c.html"/>
    <id>https://sundocker.online/posts/69c3279c.html</id>
    <published>2023-01-02T09:41:43.000Z</published>
    <updated>2023-01-22T12:29:01.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><h3 id="Conceptual-Framework">Conceptual Framework</h3><h3 id="Install-Simple-Use">Install &amp; Simple Use</h3><h2 id="File">File</h2><ul><li>.gitignore</li></ul><h2 id="Branch">Branch</h2><ul><li>rebase</li><li>label</li></ul><h2 id="Remote">Remote</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&quot;Conceptual-Framework&quot;&gt;Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;Install-Simple-Use&quot;&gt;Install &amp;amp; Simple Use</summary>
      
    
    
    
    <category term="Project Management" scheme="https://sundocker.online/categories/Project-Management/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Git" scheme="https://sundocker.online/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Data Mining</title>
    <link href="https://sundocker.online/posts/a9ab4cb3.html"/>
    <id>https://sundocker.online/posts/a9ab4cb3.html</id>
    <published>2023-01-02T09:37:09.000Z</published>
    <updated>2023-01-02T09:37:30.383Z</updated>
    
    
    
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Data Mining" scheme="https://sundocker.online/tags/Data-Mining/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop</title>
    <link href="https://sundocker.online/posts/b3349d42.html"/>
    <id>https://sundocker.online/posts/b3349d42.html</id>
    <published>2023-01-02T09:36:57.000Z</published>
    <updated>2023-01-02T09:37:39.575Z</updated>
    
    
    
    
    <category term="Big Data" scheme="https://sundocker.online/categories/Big-Data/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Hadoop" scheme="https://sundocker.online/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>C++</title>
    <link href="https://sundocker.online/posts/caeaa4a1.html"/>
    <id>https://sundocker.online/posts/caeaa4a1.html</id>
    <published>2023-01-02T09:34:44.000Z</published>
    <updated>2023-01-22T15:31:19.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Basic-C">1 Basic C++</h2><h3 id="1-1-Variable-Data-Type">1.1 Variable &amp; Data Type</h3><ul><li>Array</li></ul><h3 id="1-2-Program-Control">1.2 Program Control</h3><h3 id="1-3-Function">1.3 Function</h3><ul><li>advanced</li></ul><h3 id="1-4-Pointer">1.4 Pointer</h3><h3 id="1-5-Structure">1.5 Structure</h3><h2 id="2-Object-oriented-C">2 Object-oriented C++</h2><h3 id="2-1-Memory-Partition">2.1 Memory Partition</h3><h3 id="2-2-Reference">2.2 Reference</h3><h3 id="2-3-Class-Object">2.3 Class &amp; Object</h3><h3 id="2-4-File">2.4 File</h3><h2 id="3-Template-C">3 Template C++</h2><h3 id="3-1-Conceptual-Framework">3.1 Conceptual Framework</h3><h3 id="3-2-Function-Template">3.2 Function Template</h3><h3 id="3-3-Class-Template">3.3 Class Template</h3><h2 id="4-C-STL">4 C++ STL</h2><h3 id="4-1-Conceptual-Framework">4.1 Conceptual Framework</h3><h3 id="4-2-Container">4.2 Container</h3><h3 id="4-3-Function-Object">4.3 Function Object</h3><h3 id="4-3-Algorithm">4.3 Algorithm</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Basic-C&quot;&gt;1 Basic C++&lt;/h2&gt;
&lt;h3 id=&quot;1-1-Variable-Data-Type&quot;&gt;1.1 Variable &amp;amp; Data Type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-2-</summary>
      
    
    
    
    <category term="C &amp; C++i" scheme="https://sundocker.online/categories/C-C-i/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="C++" scheme="https://sundocker.online/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://sundocker.online/posts/9acacb00.html"/>
    <id>https://sundocker.online/posts/9acacb00.html</id>
    <published>2023-01-02T09:21:16.000Z</published>
    <updated>2023-01-22T12:51:50.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><h3 id="Conceptual-Framework">Conceptual Framework</h3><h3 id="Cluster-Constructing">Cluster Constructing</h3><h2 id="Namespace-Label">Namespace &amp; Label</h2><h2 id="Pod-Deployment">Pod &amp; Deployment</h2><h2 id="Service">Service</h2><h2 id="Data-Storage-Safe-Authentication-DashBoard">Data Storage &amp; Safe Authentication &amp; DashBoard</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&quot;Conceptual-Framework&quot;&gt;Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;Cluster-Constructing&quot;&gt;Cluster Constructing&lt;/</summary>
      
    
    
    
    <category term="Operations" scheme="https://sundocker.online/categories/Operations/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Kubernetes" scheme="https://sundocker.online/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://sundocker.online/posts/f5f9fa9b.html"/>
    <id>https://sundocker.online/posts/f5f9fa9b.html</id>
    <published>2023-01-02T09:21:12.000Z</published>
    <updated>2023-01-22T12:51:53.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><h3 id="Conceptual-Framework">Conceptual Framework</h3><h3 id="Install-Simple-Use">Install &amp; Simple Use</h3><h2 id="Data-Volume-Deploy">Data Volume &amp; Deploy</h2><h2 id="Dockerfile">Dockerfile</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&quot;Conceptual-Framework&quot;&gt;Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;Install-Simple-Use&quot;&gt;Install &amp;amp; Simple Use</summary>
      
    
    
    
    <category term="Operations" scheme="https://sundocker.online/categories/Operations/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Docker" scheme="https://sundocker.online/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://sundocker.online/posts/53d0684b.html"/>
    <id>https://sundocker.online/posts/53d0684b.html</id>
    <published>2023-01-02T09:21:06.000Z</published>
    <updated>2023-01-22T12:51:43.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><h3 id="Conceptual-Framework">Conceptual Framework</h3><h3 id="Install">Install</h3><h3 id="Man-Page">Man Page</h3><p>Network</p><h2 id="File-Directory-Disk">File &amp; Directory &amp; Disk</h2><h3 id="Conceptual-Framework-2">Conceptual Framework</h3><ul><li>Compress</li><li>Search</li><li>Software package</li></ul><h2 id="User-Permission">User Permission</h2><h2 id="System-Process-Management">System &amp; Process Management</h2><ul><li>Time &amp; Date</li></ul><h2 id="Shell">Shell</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Overview&quot;&gt;Overview&lt;/h2&gt;
&lt;h3 id=&quot;Conceptual-Framework&quot;&gt;Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;Install&quot;&gt;Install&lt;/h3&gt;
&lt;h3 id=&quot;Man-Page&quot;&gt;Man </summary>
      
    
    
    
    <category term="Operations" scheme="https://sundocker.online/categories/Operations/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Linux" scheme="https://sundocker.online/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>uni-app</title>
    <link href="https://sundocker.online/posts/e19785da.html"/>
    <id>https://sundocker.online/posts/e19785da.html</id>
    <published>2023-01-02T08:12:53.000Z</published>
    <updated>2023-01-21T14:51:04.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Component">Component</h2><h2 id="Layout">Layout</h2><h2 id="Configuration">Configuration</h2><h2 id="Event-Lifecycle">Event &amp; Lifecycle</h2><h2 id="Route">Route</h2><h2 id="MobX">MobX</h2><h2 id="HTTP-Request">HTTP Request</h2><h2 id="Project-Management">Project Management</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Component&quot;&gt;Component&lt;/h2&gt;
&lt;h2 id=&quot;Layout&quot;&gt;Layout&lt;/h2&gt;
&lt;h2 id=&quot;Configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;h2 id=&quot;Event-Lifecycle&quot;&gt;Event &amp;amp;</summary>
      
    
    
    
    <category term="Frontend" scheme="https://sundocker.online/categories/Frontend/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="uni-app" scheme="https://sundocker.online/tags/uni-app/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="https://sundocker.online/posts/f8e09374.html"/>
    <id>https://sundocker.online/posts/f8e09374.html</id>
    <published>2023-01-02T08:12:48.000Z</published>
    <updated>2023-01-21T07:12:49.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Overview">1 Overview</h2><h3 id="1-1-Conceptual-Framework">1.1 Conceptual Framework</h3><h3 id="1-2-Install-Simple-Use">1.2 Install &amp;&amp; Simple Use</h3><h2 id="2-MVVM-Declarative-Programming">2 MVVM &amp; Declarative Programming</h2><h3 id="2-1-Data-Agency-Listen">2.1 Data Agency &amp; Listen</h3><h3 id="2-2-Instruction-Data-Binding">2.2 Instruction Data Binding</h3><ul><li>Collect form data</li><li>Further instructions</li></ul><h3 id="2-3-Computed-Watch-Attribute">2.3 Computed &amp; Watch Attribute</h3><h3 id="2-4-Event-Processing-Lifecycle">2.4 Event Processing &amp; Lifecycle</h3><h3 id="2-5-Condition-List-Rendering">2.5 Condition &amp; List Rendering</h3><h2 id="3-Component-based-Programming">3 Component-based Programming</h2><h3 id="3-1-Conceptual-Framework">3.1 Conceptual Framework</h3><h3 id="3-2-Vue-Component-Framework">3.2 Vue Component Framework</h3><ul><li>CLI framework</li><li>Non-single file component</li><li>Single file component structure</li></ul><h3 id="3-3-Component-Attribute">3.3 Component Attribute</h3><ul><li>render</li><li>scope</li><li>ref</li><li>props</li></ul><h3 id="3-4-Component-Event">3.4 Component Event</h3><ul><li>custom event</li><li>global event bus</li><li>$nextTick</li><li>WEB &amp; AJAX</li></ul><h3 id="3-5-Mix-In-Plugin-Slot">3.5 Mix In &amp; Plugin &amp; Slot</h3><h3 id="3-6-Transition-Animation">3.6 Transition &amp; Animation</h3><h3 id="3-7-Component-Library">3.7 Component Library</h3><h2 id="4-Vuex">4 Vuex</h2><h3 id="4-1-Conceptual-Framework">4.1 Conceptual Framework</h3><h3 id="4-2-Install-Simple-Use">4.2 Install &amp; Simple Use</h3><h3 id="4-3-Map">4.3 Map</h3><h3 id="4-4-Namespace">4.4 Namespace</h3><h2 id="5-Vue-router">5  Vue-router</h2><h3 id="5-1-Conceptual-Framework">5.1 Conceptual  Framework</h3><ul><li>Tow working mode of route</li></ul><h3 id="5-2-Install-Basic-Use">5.2 Install &amp; Basic Use</h3><ul><li>Basic route</li><li>Nested route</li><li>Cached route</li><li>Programming route</li></ul><h3 id="5-3-Parameter">5.3 Parameter</h3><h3 id="5-4-Hook-Guard">5.4 Hook &amp; Guard</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Overview&quot;&gt;1 Overview&lt;/h2&gt;
&lt;h3 id=&quot;1-1-Conceptual-Framework&quot;&gt;1.1 Conceptual Framework&lt;/h3&gt;
&lt;h3 id=&quot;1-2-Install-Simple-Use&quot;&gt;1.2 Inst</summary>
      
    
    
    
    <category term="Frontend" scheme="https://sundocker.online/categories/Frontend/"/>
    
    
    <category term="Computer" scheme="https://sundocker.online/tags/Computer/"/>
    
    <category term="Vue" scheme="https://sundocker.online/tags/Vue/"/>
    
  </entry>
  
</feed>
